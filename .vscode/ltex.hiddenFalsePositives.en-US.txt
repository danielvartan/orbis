{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q# orbis <a href = \"https://danielvartan.github.io/brandr/\"><img src = \"man/figures/logo.png\" align=\"right\" width=\"120\" /></a>\\E$"}
{"rule":"EN_QUOTES","sentence":"^\\Q# orbis <a href = \"https://danielvartan.github.io/brandr/\"><img src = \"man/figures/logo.png\" align=\"right\" width=\"120\" /></a>\\E$"}
{"rule":"EN_QUOTES","sentence":"^\\Q```{r}\n#| label: setup\n#| include: false\\E$"}
{"rule":"LIBRARY","sentence":"^\\Qlibrary(orbis)\\E$"}
{"rule":"SENTENCE_WHITESPACE","sentence":"^\\QR'\nlibrary(beepr)\nlibrary(cffr)\nlibrary(codemetar)\nlibrary(groomr) # https://github.com/danielvartan/groomr\nlibrary(here)\nlibrary(rutils) # https://github.com/danielvartan/rutils\n```\\E$"}
{"rule":"LIBRARY","sentence":"^\\QR'\nlibrary(beepr)\nlibrary(cffr)\nlibrary(codemetar)\nlibrary(groomr) # https://github.com/danielvartan/groomr\nlibrary(here)\nlibrary(rutils) # https://github.com/danielvartan/rutils\n```\\E$"}
{"rule":"EN_QUOTES","sentence":"^\\QR'\nlibrary(beepr)\nlibrary(cffr)\nlibrary(codemetar)\nlibrary(groomr) # https://github.com/danielvartan/groomr\nlibrary(here)\nlibrary(rutils) # https://github.com/danielvartan/rutils\n```\\E$"}
{"rule":"COMPREHENSIVE","sentence":"^\\Q`orbis` is an R package that offers a comprehensive suite of tools for simplifying spatial data analysis.\\E$"}
{"rule":"EN_QUOTES","sentence":"^\\Q``` r\nremotes::install_github(\"danielvartan/orbis\")\n```\\E$"}
{"rule":"GITHUB","sentence":"^\\Q``` r\nremotes::install_github(\"danielvartan/orbis\")\n```\\E$"}
{"rule":"WORD_CONTAINS_UNDERSCORE","sentence":"^\\Q- [`get_country_names`](https://danielvartan.github.io/orbis/reference/get_country_names.html): Get names or codes of all countries present in the ISO 3166-1 standard.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q- [`get_brazil_state`](https://danielvartan.github.io/orbis/reference/get_brazil_state.html): Get Brazilian state names.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q- [`get_brazil_fu`](https://danielvartan.github.io/orbis/reference/get_brazil_fu.html): Get Brazilian federative unit abbreviations.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q- [`get_brazil_region`](https://danielvartan.github.io/orbis/reference/get_brazil_region.html): Get Brazilian regions.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q<br>\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q- [`get_brazil_municipality`](https://danielvartan.github.io/orbis/reference/get_brazil_municipality.html): Get Brazilian municipalities data.\\E$"}
{"rule":"POSSESSIVE_APOSTROPHE","sentence":"^\\Q- [`get_brazil_municipality`](https://danielvartan.github.io/orbis/reference/get_brazil_municipality.html): Get Brazilian municipalities data.\\E$"}
{"rule":"EN_QUOTES","sentence":"^\\Qlibrary(badger)\nlibrary(beepr)\nlibrary(cffr)\nlibrary(codemetar)\nlibrary(dplyr)\nlibrary(fs)\nlibrary(geodata)\nlibrary(groomr) # https://github.com/danielvartan/groomr\nlibrary(here)\nlibrary(readr)\nlibrary(rutils) # https://github.com/danielvartan/rutils\nlibrary(terra)\n```\\E$"}
{"rule":"EN_QUOTES","sentence":"^\\Q<!-- badges: start -->\n```{r}\n#| echo: false\n#| output: asis\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q<!-- badges: start -->\n```{r}\n#| echo: false\n#| output: asis\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\Qcat(\n  badger::badge_repostatus(\"active\"),\n  badger::badge_cran_release(),\n  badger::badge_github_actions(action = \"R-CMD-check.yaml\"),\n  badger::badge_codecov() |> rutils::shush(),\n  badger::badge_license(\n    \"MIT\",\n    \"green\",\n    url = \"https://choosealicense.com/licenses/mit/\"\n  ),\n  badger::badge_custom(\n    \"Contributor%20Covenant\",\n    \"2.1\",\n    \"4baaaa\",\n    \"CODE_OF_CONDUCT.md\"\n  )\n)\n```\n<!-- badges: end -->\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Qcat(\n  badger::badge_repostatus(\"active\"),\n  badger::badge_cran_release(),\n  badger::badge_github_actions(action = \"R-CMD-check.yaml\"),\n  badger::badge_codecov() |> rutils::shush(),\n  badger::badge_license(\n    \"MIT\",\n    \"green\",\n    url = \"https://choosealicense.com/licenses/mit/\"\n  ),\n  badger::badge_custom(\n    \"Contributor%20Covenant\",\n    \"2.1\",\n    \"4baaaa\",\n    \"CODE_OF_CONDUCT.md\"\n  )\n)\n```\n<!-- badges: end -->\\E$"}
{"rule":"EN_QUOTES","sentence":"^\\Qcat(\n  badger::badge_repostatus(\"active\"),\n  badger::badge_cran_release(),\n  badger::badge_github_actions(action = \"R-CMD-check.yaml\"),\n  badger::badge_codecov() |> rutils::shush(),\n  badger::badge_license(\n    \"MIT\",\n    \"green\",\n    url = \"https://choosealicense.com/licenses/mit/\"\n  ),\n  badger::badge_custom(\n    \"Contributor%20Covenant\",\n    \"2.1\",\n    \"4baaaa\",\n    \"CODE_OF_CONDUCT.md\"\n  )\n)\n```\n<!-- badges: end -->\\E$"}
{"rule":"GITHUB","sentence":"^\\Qcat(\n  badger::badge_repostatus(\"active\"),\n  badger::badge_cran_release(),\n  badger::badge_github_actions(action = \"R-CMD-check.yaml\"),\n  badger::badge_codecov() |> rutils::shush(),\n  badger::badge_license(\n    \"MIT\",\n    \"green\",\n    url = \"https://choosealicense.com/licenses/mit/\"\n  ),\n  badger::badge_custom(\n    \"Contributor%20Covenant\",\n    \"2.1\",\n    \"4baaaa\",\n    \"CODE_OF_CONDUCT.md\"\n  )\n)\n```\n<!-- badges: end -->\\E$"}
{"rule":"WORD_CONTAINS_UNDERSCORE","sentence":"^\\Qcat(\n  badger::badge_repostatus(\"active\"),\n  badger::badge_cran_release(),\n  badger::badge_github_actions(action = \"R-CMD-check.yaml\"),\n  badger::badge_codecov() |> rutils::shush(),\n  badger::badge_license(\n    \"MIT\",\n    \"green\",\n    url = \"https://choosealicense.com/licenses/mit/\"\n  ),\n  badger::badge_custom(\n    \"Contributor%20Covenant\",\n    \"2.1\",\n    \"4baaaa\",\n    \"CODE_OF_CONDUCT.md\"\n  )\n)\n```\n<!-- badges: end -->\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\Qcat(\n  badger::badge_repostatus(\"active\"),\n  badger::badge_cran_release(),\n  badger::badge_github_actions(action = \"R-CMD-check.yaml\"),\n  badger::badge_codecov() |> rutils::shush(),\n  badger::badge_license(\n    \"MIT\",\n    \"green\",\n    url = \"https://choosealicense.com/licenses/mit/\"\n  ),\n  badger::badge_custom(\n    \"Contributor%20Covenant\",\n    \"2.1\",\n    \"4baaaa\",\n    \"CODE_OF_CONDUCT.md\"\n  )\n)\n```\n<!-- badges: end -->\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q&nbsp; [![GitHub repo stars](https://img.shields.io/github/stars/danielvartan/orbis)](https://github.com/danielvartan/orbis/)\\E$"}
{"rule":"DASH_RULE","sentence":"^\\Q- [`filter_points_on_land`](https://danielvartan.github.io/orbis/reference/Filter_points_on_land.html): Filters latitude/longitude points that intersects with a given [`sf`](https://r-spatial.github.io/sf/) geometry.\\E$"}
{"rule":"WORD_CONTAINS_UNDERSCORE","sentence":"^\\Q- [`filter_points_on_land`](https://danielvartan.github.io/orbis/reference/Filter_points_on_land.html): Filters latitude/longitude points that intersects with a given [`sf`](https://r-spatial.github.io/sf/) geometry.\\E$"}
{"rule":"DASH_RULE","sentence":"^\\Q- [`get_brazil_municipality`](https://danielvartan.github.io/orbis/reference/get_brazil_municipality.html): Get Brazilian municipalities data.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q- [`wc_to_ascii`](https://danielvartan.github.io/orbis/reference/wc_to_ascii.html): Convert [WorldClim](https://worldclim.org/) [GeoTIFF](https://en.wikipedia.org/wiki/GeoTIFF) files to [ASCII](https://en.wikipedia.org/wiki/Esri_grid) raster format.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q```{r}\n#| eval: false\\E$"}
{"rule":"ARROWS","sentence":"^\\Qraster <-\n  expand.grid(\n    seq(-179.75, 179.75, by = 0.5),\n    seq(-89.75, 89.75, by = 0.5)\n  ) |>\n  as_tibble() |>\n  rename(x = Var1, y = Var2) |>\n  mutate(value = rnorm(259200)) |>\n  rast(type = \"xyz\") %>%\n  `crs<-`(\"epsg:4326\")\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\Qraster <-\n  expand.grid(\n    seq(-179.75, 179.75, by = 0.5),\n    seq(-89.75, 89.75, by = 0.5)\n  ) |>\n  as_tibble() |>\n  rename(x = Var1, y = Var2) |>\n  mutate(value = rnorm(259200)) |>\n  rast(type = \"xyz\") %>%\n  `crs<-`(\"epsg:4326\")\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Qraster <-\n  expand.grid(\n    seq(-179.75, 179.75, by = 0.5),\n    seq(-89.75, 89.75, by = 0.5)\n  ) |>\n  as_tibble() |>\n  rename(x = Var1, y = Var2) |>\n  mutate(value = rnorm(259200)) |>\n  rast(type = \"xyz\") %>%\n  `crs<-`(\"epsg:4326\")\\E$"}
{"rule":"ARROWS","sentence":"^\\Qraster <-\n  expand.grid(\n    seq(-179.75, 179.75, by = 0.5),\n    seq(-89.75, 89.75, by = 0.5)\n  ) |>\n  as_tibble() |>\n  rename(x = Var1, y = Var2) |>\n  mutate(value = rnorm(259200)) |>\n  rast(type = \"xyz\") %>%\n  `crs<-`(\"epsg:4326\")\\E$"}
{"rule":"ARROWS","sentence":"^\\Qworld_shape <- world(path = tempdir())\nraster <- raster |> crop(world_shape, mask = TRUE)\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qorbis 0.1.0.9000 Development version\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Qworld_shape <- world(path = tempdir())\nraster <- raster |> crop(world_shape, mask = TRUE)\\E$"}
{"rule":"ARROWS","sentence":"^\\Qvector <- gadm(country = \"rus\", level = 0, path = tempdir())\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Qvector <- gadm(country = \"rus\", level = 0, path = tempdir())\\E$"}
{"rule":"EN_QUOTES","sentence":"^\\Qvector <- gadm(country = \"rus\", level = 0, path = tempdir())\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Qraster |>\n  shift_and_crop(vector, dx = -45) |>\n  plot()\n```\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q```{r}\n#| echo: false\n#| output: asis\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\Qcat(\n  badger::badge_license(\n    \"MIT\",\n    \"green\",\n    url = \"https://choosealicense.com/licenses/mit/\"\n  )\n)\n```\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Qcat(\n  badger::badge_license(\n    \"MIT\",\n    \"green\",\n    url = \"https://choosealicense.com/licenses/mit/\"\n  )\n)\n```\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\Qcat(\n  badger::badge_custom( # Contributor Covenant\n    \"Contributor%20Covenant\",\n    \"2.1\",\n    \"4baaaa\",\n    \"CODE_OF_CONDUCT.md\"\n  )\n)\n```\\E$"}
{"rule":"PASSIVE_VOICE","sentence":"^\\Q`orbis` code is released under the [MIT license](https://opensource.org/license/mit).\\E$"}
