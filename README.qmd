# orbis <a href = "https://danielvartan.github.io/brandr/"><img src = "man/figures/logo.png" align="right" width="120" /></a>

<!-- quarto render -->

```{r}
#| label: setup
#| include: false

library(orbis)

library(badger)
library(dplyr)
library(geobr)
library(geodata)
library(ggplot2)
library(here)
library(rutils) # github.com/danielvartan/rutils
library(sf)
library(terra)
library(tidyterra)

source(here("R", ".setup.R"))
```

<!-- badges: start -->
```{r}
#| echo: false
#| output: asis

cat(
  badge_repostatus("active"),
  badge_cran_release(),
  badge_github_actions(action = "R-CMD-check.yaml"),
  badge_codecov() |> shush(),
  badge_license(
    license = "GPLv3",
    color = "bd0000",
    url = "https://www.gnu.org/licenses/gpl-3.0"
  ),
  badge_custom(
    x = "Contributor%20Covenant",
    y = "3.0",
    color = "4baaaa",
    url = "https://www.contributor-covenant.org/version/3/0/code_of_conduct/"
  )
)
```
<!-- badges: end -->

## Overview

`orbis` is an [R](https://www.r-project.org/) package that provides a comprehensive suite of tools for streamlining spatial data analysis workflows. It follows the [tidyverse principles](https://tidyverse.tidyverse.org/articles/manifesto.html) and integrates naturally with the [tidyverse ecosystem](https://www.tidyverse.org/).

> If you find this project useful, please consider giving it a star! &nbsp; [![GitHub repo stars](https://img.shields.io/github/stars/danielvartan/orbis)](https://github.com/danielvartan/orbis/)

## Installation

You can install `orbis` using the [`remotes`](https://github.com/r-lib/remotes) package:

``` r
# install.packages("remotes")
remotes::install_github("danielvartan/orbis", dependencies = TRUE)
```

## Usage

`orbis` is equipped with several functions to help with your analysis, such as:

- [`shift_and_rotate()`](https://danielvartan.github.io/orbis/reference/shift_and_rotate.html): Shift and rotate raster or vector data.
- [`remove_unique_outliers()`](https://danielvartan.github.io/orbis/reference/remove_unique_outliers.html): Remove unique outliers from raster files.
- [`map_fill_data()`](https://danielvartan.github.io/orbis/reference/map_fill_data.html): Prepare data to fill a map.
- [`filter_points_on_land()`](https://danielvartan.github.io/orbis/reference/filter_points_on_land.html): Filter latitude/longitude points that intersects with a given [`sf`](https://r-spatial.github.io/sf/) geometry.
- [`brazil_municipality()`](https://danielvartan.github.io/orbis/reference/brazil_municipality.html): Get Brazilian municipalities data.
- [`sidra_download_by_year()`](https://danielvartan.github.io/orbis/reference/sidra_download_by_year.html): Get and aggregate data by year from [SIDRA](https://sidra.ibge.gov.br/) API (to avoid overloading).
- [`worldclim_to_ascii()`](https://danielvartan.github.io/orbis/reference/worldclim_to_ascii.html): Convert [WorldClim](https://worldclim.org/) [GeoTIFF](https://www.ogc.org/standards/geotiff/) files to [Esri ASCII](https://desktop.arcgis.com/en/arcmap/latest/manage-data/raster-and-images/esri-ascii-raster-format.htm) raster format.

Here are some examples of how to use a few of these functions.

### `shift_and_rotate()`

[`shift_and_rotate()`](https://danielvartan.github.io/orbis/reference/shift_and_rotate.html) was developed to simplify shifting and rotating spatial data, especially for rasters and vectors that cross the dateline (e.g., Russia).

```{r}
library(dplyr)
library(geodata)
library(ggplot2)
library(orbis)
library(terra)
library(tidyterra)
```

```{r}
world_shape <- world(path = tempdir())
```

```{r}
#| label: readme-shift-and-rotate-1

world_shape |>
  ggplot() +
  geom_spatvector(fill = "#072359", color = "white")
```

```{r}
russia_shape <- gadm(country = "rus", level = 0, path = tempdir())
```

```{r}
#| label: readme-shift-and-rotate-2

russia_shape |>
  ggplot() +
  geom_spatvector(fill = "#3243A6", color = "white")
```

```{r}
#| label: readme-shift-and-rotate-3

russia_shape |>
  shift_and_rotate(dx = -45) |>
  ggplot() +
  geom_spatvector(fill = "#3243A6", color = "white")
```

### `remove_unique_outliers()`

[`remove_unique_outliers()`](https://danielvartan.github.io/orbis/reference/remove_unique_outliers.html) was developed to simplify the removal of abnormal values in raster files. It can be used with [GeoTIFF](https://www.ogc.org/standards/geotiff/) and [Esri ASCII](https://desktop.arcgis.com/en/arcmap/latest/manage-data/raster-and-images/esri-ascii-raster-format.htm) raster formats.

```{r}
library(orbis)
library(readr)
library(terra)
```

```{r}
asc_content <- c(
  "ncols         5",
  "nrows         5",
  "xllcorner     0.0",
  "yllcorner     0.0",
  "cellsize      1.0",
  "NODATA_value  -9999",
  "1 2 3 4 5",
  "6 7 8 9 10",
  "11 12 1000 14 15", # Extreme outlier (1000)
  "16 1 18 19 20",
  "21 22 23 24 25"
)
```

```{r}
temp_file <- tempfile(fileext = ".asc")

asc_content |> write_lines(temp_file)
```

Values before `remove_unique_outliers()`:

```{r}
temp_file |> rast() |> values(mat = FALSE)
```

Values after `remove_unique_outliers()`:

```{r}
temp_file |> remove_unique_outliers()
temp_file |> rast() |> values(mat = FALSE)
```

### `map_fill_data()`

[`map_fill_data()`](https://danielvartan.github.io/orbis/reference/map_fill_data.html) was developed to simplify the preparation of data to fill a map.

```{r}
library(dplyr)
library(geodata)
library(ggplot2)
library(orbis)
library(terra)
library(tidyterra)
```

```{r}
brazil_states <- geodata::gadm("BRA", level = 1, path = tempdir())
```

```{r}
#| label: readme-map-fill-data-1

brazil_states |>
  ggplot() +
  geom_spatvector(fill = "#5F45BF", color = "white")
```

```{r}
data <- tibble(
  state = sample(brazil_states$NAME_1, size = 1000, replace = TRUE),
  value = sample(1:1000, size = 1000, replace = TRUE)
)

data
```

```{r}
data <- map_fill_data(data, col_fill = "value", col_code = "state")

data
```

```{r}
#| label: readme-map-fill-data-2

left_join(brazil_states, data, by = c("NAME_1" = "state")) |>
  ggplot() +
  geom_spatvector(aes(fill = n), color = "white") +
  labs(fill = NULL)
```

### `filter_points_on_land()`

[`filter_points_on_land()`](https://danielvartan.github.io/orbis/reference/filter_points_on_land.html) was developed to filter latitude/longitude points that intersect with a given [`sf`](https://r-spatial.github.io/sf/) geometry. This is particularly useful for removing points that fall in the ocean when working with country or state boundaries.

```{r}
library(dplyr)
library(ggplot2)
library(geobr)
library(orbis)
library(sf)
```

```{r}
data <- tibble(
  latitude = brazil_state_latitude(),
  longitude = brazil_state_longitude()
)

data
```

```{r}
plot_points <- function(data, vector) {
  plot <-
    data |>
    ggplot(aes(x = longitude, y = latitude)) +
    geom_sf(
      data = vector,
      color = "gray75",
      fill = "white",
      inherit.aes = FALSE
    ) +
    geom_point(color = "#3243A6") +
    labs(x = "Longitude", y = "Latitude")

  print(plot)
}
```

```{r}
brazil_state_vector <- read_state()
```

```{r}
#| label: readme-filter-points-on-land-1

data |> plot_points(brazil_state_vector)
```

```{r}
sp_state_vector <- read_state(code = "SP")

sp_state_vector |> st_bbox()
```

```{r}
data <- filter_points_on_land(data, sp_state_vector |> pull(geom))

data
```

```{r}
#| label: readme-filter-points-on-land-2

data |> plot_points(brazil_state_vector)
```

Click [here](https://danielvartan.github.io/orbis/reference/) to see the full list of functions.

## Citation

If you use this package in your research, please cite it to acknowledge the effort put into its development and maintenance. Your citation helps support its continued improvement.

```{r}
citation("orbis")
```

## License

```{r}
#| echo: false
#| output: asis

cat(
  badge_license(
    license = "GPLv3",
    color = "bd0000",
    url = "https://www.gnu.org/licenses/gpl-3.0"
  )
)
```

```text
Copyright (C) 2025 Daniel Vartanian

orbis is free software: you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see <https://www.gnu.org/licenses/>.
```

## Contributing

```{r}
#| echo: false
#| output: asis

cat(
  badge_custom(
    x = "Contributor%20Covenant",
    y = "3.0",
    color = "4baaaa",
    url = "https://www.contributor-covenant.org/version/3/0/code_of_conduct/"
  )
)
```

Contributions are welcome! Whether you want to report bugs, suggest features, or improve the code or documentation, your input is highly valued. Please check the [issues tab](https://github.com/danielvartan/orbis/issues) for existing issues or to open a new one.

[![](https://img.shields.io/static/v1?label=Sponsor&message=%E2%9D%A4&logo=GitHub&color=%23fe8e86)](https://github.com/sponsors/danielvartan)

You can also support the development of `orbis` by becoming a sponsor. Click [here](https://github.com/sponsors/danielvartan) to make a donation. Please mention `orbis` in your donation message.
