[{"path":[]},{"path":"https://danielvartan.github.io/orbis/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant 3.0 Code of Conduct","text":"pledge make community welcoming, safe, equitable . committed fostering environment respects promotes dignity, rights, contributions individuals, regardless characteristics including race, ethnicity, caste, color, age, physical characteristics, neurodiversity, disability, sex gender, gender identity expression, sexual orientation, language, philosophy religion, national social origin, socio-economic position, level education, status. privileges participation extended everyone participates good faith accordance Covenant.","code":""},{"path":"https://danielvartan.github.io/orbis/CODE_OF_CONDUCT.html","id":"encouraged-behaviors","dir":"","previous_headings":"","what":"Encouraged Behaviors","title":"Contributor Covenant 3.0 Code of Conduct","text":"acknowledging differences social norms, strive meet community’s expectations positive behavior. also understand words actions may interpreted differently intend based culture, background, native language. considerations mind, agree behave mindfully toward act ways center shared values, including: Respecting purpose community, activities, ways gathering. Engaging kindly honestly others. Respecting different viewpoints experiences. Taking responsibility actions contributions. Gracefully giving accepting constructive feedback. Committing repairing harm occurs. Behaving ways promote sustain well-community.","code":""},{"path":"https://danielvartan.github.io/orbis/CODE_OF_CONDUCT.html","id":"restricted-behaviors","dir":"","previous_headings":"","what":"Restricted Behaviors","title":"Contributor Covenant 3.0 Code of Conduct","text":"agree restrict following behaviors community. Instances, threats, promotion behaviors violations Code Conduct. Harassment. Violating explicitly expressed boundaries engaging unnecessary personal attention clear request stop. Character attacks. Making insulting, demeaning, pejorative comments directed community member group people. Stereotyping discrimination. Characterizing anyone’s personality behavior basis immutable identities traits. Sexualization. Behaving way generally considered inappropriately intimate context purpose community. Violating confidentiality. Sharing acting someone’s personal private information without permission. Endangerment. Causing, encouraging, threatening violence harm toward person group. Behaving ways threaten well-community.","code":""},{"path":"https://danielvartan.github.io/orbis/CODE_OF_CONDUCT.html","id":"other-restrictions","dir":"","previous_headings":"Restricted Behaviors","what":"Other Restrictions","title":"Contributor Covenant 3.0 Code of Conduct","text":"Misleading identity. Impersonating someone else reason, pretending someone else evade enforcement actions. Failing credit sources. properly crediting sources content contribute. Promotional materials. Sharing marketing commercial content way outside norms community. Irresponsible communication. Failing responsibly present content includes, links describes restricted behaviors.","code":""},{"path":"https://danielvartan.github.io/orbis/CODE_OF_CONDUCT.html","id":"reporting-an-issue","dir":"","previous_headings":"","what":"Reporting an Issue","title":"Contributor Covenant 3.0 Code of Conduct","text":"Tensions can occur community members even trying best collaborate. every conflict represents code conduct violation, Code Conduct reinforces encouraged behaviors norms can help avoid conflicts minimize harm. incident occur, important report promptly. report possible violation, please send email danielvartan@proton.description incident. Community Moderators take reports violations seriously make every effort respond timely manner. investigate reports code conduct violations, reviewing messages, logs, recordings, interviewing witnesses participants. Community Moderators keep investigation enforcement actions transparent possible prioritizing safety confidentiality. order honor values, enforcement actions carried private involved parties, communicating whole community may part mutually agreed upon resolution.","code":""},{"path":"https://danielvartan.github.io/orbis/CODE_OF_CONDUCT.html","id":"addressing-and-repairing-harm","dir":"","previous_headings":"","what":"Addressing and Repairing Harm","title":"Contributor Covenant 3.0 Code of Conduct","text":"investigation Community Moderators finds Code Conduct violated, following enforcement ladder may used determine best repair harm, based incident’s impact individuals involved community whole. Depending severity violation, lower rungs ladder may skipped. Event: violation involving single incident series incidents. Consequence: private, written warning Community Moderators. Repair: Examples repair include private written apology, acknowledgement responsibility, seeking clarification expectations. Event: repeated incidence violation previously resulted warning, first incidence serious violation. Consequence: private, written warning time-limited cooldown period designed underscore seriousness situation give community members involved time process incident. cooldown period may limited particular communication channels interactions particular community members. Repair: Examples repair may include making apology, using cooldown period reflect actions impact, thoughtful re-entering community spaces period . Event: pattern repeated violation Community Moderators tried address warnings, single serious violation. Consequence: private written warning conditions return suspension. general, temporary suspensions give person suspended time reflect upon behavior possible corrective actions. Repair: Examples repair include respecting spirit suspension, meeting specified conditions return, thoughtful reintegrate community suspension lifted. Event: pattern repeated code conduct violations steps ladder failed resolve, violation serious Community Moderators determine way keep community safe person member. Consequence: Access community spaces, tools, communication channels removed. general, permanent bans rarely used, strong reasoning behind , resorted working remedies failed change behavior. Repair: possible repair cases severity. enforcement ladder intended guideline. limit ability Community Managers use discretion judgment, keeping best interests community.","code":""},{"path":"https://danielvartan.github.io/orbis/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant 3.0 Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official email address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://danielvartan.github.io/orbis/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant 3.0 Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 3.0, permanently available https://www.contributor-covenant.org/version/3/0/. Contributor Covenant stewarded Organization Ethical Source licensed CC -SA 4.0. view copy license, visit https://creativecommons.org/licenses/-sa/4.0/ answers common questions Contributor Covenant, see FAQ https://www.contributor-covenant.org/faq. Translations provided https://www.contributor-covenant.org/translations. Additional enforcement community guideline resources can found https://www.contributor-covenant.org/resources. enforcement ladder inspired work Mozilla’s code conduct team.","code":""},{"path":"https://danielvartan.github.io/orbis/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://danielvartan.github.io/orbis/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/orbis/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://danielvartan.github.io/orbis/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://danielvartan.github.io/orbis/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://danielvartan.github.io/orbis/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://danielvartan.github.io/orbis/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://danielvartan.github.io/orbis/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://danielvartan.github.io/orbis/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://danielvartan.github.io/orbis/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://danielvartan.github.io/orbis/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://danielvartan.github.io/orbis/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://danielvartan.github.io/orbis/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://danielvartan.github.io/orbis/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://danielvartan.github.io/orbis/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://danielvartan.github.io/orbis/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License.","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://danielvartan.github.io/orbis/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://danielvartan.github.io/orbis/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://danielvartan.github.io/orbis/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://danielvartan.github.io/orbis/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://danielvartan.github.io/orbis/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands `show w’ `show c’ show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see https://www.gnu.org/licenses/. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read https://www.gnu.org/licenses/--lgpl.html.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation, either version 3 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author>     This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.     This is free software, and you are welcome to redistribute it     under certain conditions; type `show c' for details."},{"path":"https://danielvartan.github.io/orbis/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Vartanian. Author, maintainer, conceptor, copyright holder.","code":""},{"path":"https://danielvartan.github.io/orbis/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vartanian, D. (2025). orbis: Spatial data analysis tools [Computer software]. https://danielvartan.github.io/orbis","code":"@Misc{,   title = {orbis: Spatial data analysis tools},   author = {Daniel Vartanian},   year = {2025},   url = {https://danielvartan.github.io/orbis},   note = {R package}, }"},{"path":[]},{"path":"https://danielvartan.github.io/orbis/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Spatial Data Analysis Tools","text":"orbis R package offers suite tools simplifying spatial data analysis. find project useful, please consider giving star!  ","code":""},{"path":"https://danielvartan.github.io/orbis/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Spatial Data Analysis Tools","text":"can install orbis using remotes package:","code":"# install.packages(\"remotes\") remotes::install_github(\"danielvartan/orbis\", dependencies = TRUE)"},{"path":"https://danielvartan.github.io/orbis/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Spatial Data Analysis Tools","text":"orbis equipped several functions help analysis, : filter_points_on_land: Filters latitude/longitude points intersects given sf geometry. get_brazil_municipality: Get Brazilian municipalities data. get_sidra_by_year: Get aggregate data year SIDRA API (avoid overloading). shift_and_rotate: Shift rotate raster vector data. shift and_crop: Shift, rotate, crop raster using vector. wc_to_ascii: Convert WorldClim GeoTIFF files ASCII raster format. Example:    Click see full list functions.","code":"library(dplyr) library(geodata) library(orbis) library(terra) raster <-   expand.grid(     seq(-179.75, 179.75, by = 0.5),     seq(-89.75, 89.75, by = 0.5)   ) |>   as_tibble() |>   rename(x = Var1, y = Var2) |>   mutate(value = rnorm(259200)) |>   rast(type = \"xyz\") %>%   `crs<-`(\"epsg:4326\")  world_shape <- world(path = tempdir()) raster <- raster |> crop(world_shape, mask = TRUE)  raster |> plot() vector <- gadm(country = \"rus\", level = 0, path = tempdir())  vector |> plot() raster |>   shift_and_crop(vector, dx = -45) |>   plot()"},{"path":"https://danielvartan.github.io/orbis/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Spatial Data Analysis Tools","text":"","code":"Copyright (C) 2025 Daniel Vartanian  orbis is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>."},{"path":"https://danielvartan.github.io/orbis/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Spatial Data Analysis Tools","text":"Contributions welcome! Whether want report bugs, suggest features, improve code documentation, input highly valued. Please check issues tab existing issues open new one.  can also support development orbis becoming sponsor. Click make donation. Please mention orbis donation message.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_fu.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Brazilian federative unit abbreviations — brazil_fu","title":"Get Brazilian federative unit abbreviations — brazil_fu","text":"brazil_fu() returns vector abbreviations Brazilian federal units.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_fu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Brazilian federative unit abbreviations — brazil_fu","text":"","code":"brazil_fu(x = NULL)"},{"path":"https://danielvartan.github.io/orbis/reference/brazil_fu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Brazilian federative unit abbreviations — brazil_fu","text":"x (optional) atomic vector containing names numeric codes Brazilian regions federal units. Municipality codes also supported. NULL, returns character vector Brazilian federal unit abbreviations (default: NULL).","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_fu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Brazilian federative unit abbreviations — brazil_fu","text":"character vector abbreviations Brazilian federal units.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_fu.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Brazilian federative unit abbreviations — brazil_fu","text":"data function based data Brazilian Institute Geography Statistics (IBGE, n.d.).","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_fu.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Brazilian federative unit abbreviations — brazil_fu","text":"Instituto Brasileiro de Geografia e Estatística. (n.d.). Território [Territory] [Dataset]. SIDRA. https://sidra.ibge.gov.br/territorio","code":""},{"path":[]},{"path":"https://danielvartan.github.io/orbis/reference/brazil_fu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Brazilian federative unit abbreviations — brazil_fu","text":"","code":"brazil_fu() #>  [1] \"AC\" \"AL\" \"AP\" \"AM\" \"BA\" \"CE\" \"DF\" \"ES\" \"GO\" \"MA\" \"MT\" \"MS\" \"MG\" \"PA\" \"PB\" #> [16] \"PR\" \"PE\" \"PI\" \"RJ\" \"RN\" \"RS\" \"RO\" \"RR\" \"SC\" \"SP\" \"SE\" \"TO\"  brazil_fu(\"sp\") #> [1] \"SP\" #> [1] \"SP\" # Expected  brazil_fu(\"sao paulo\") #> [1] \"SP\" #> [1] \"SP\" # Expected  brazil_fu(35) #> [1] \"SP\" #> [1] \"SP\" # Expected  brazil_fu(3550308) # Municipality of São Paulo #> [1] \"SP\" #> [1] \"SP\" # Expected  brazil_fu(35503081) # >7 digits #> [1] NA #> [1] NA # Expected  brazil_fu(39027001) # Non-existent state code #> [1] NA #> [1] NA # Expected  brazil_fu(\"southeast\") #> [1] \"ES\" \"MG\" \"RJ\" \"SP\" #> [1] \"ES\" \"MG\" \"RJ\" \"SP\" # Expected  brazil_fu(3) #> [1] \"ES\" \"MG\" \"RJ\" \"SP\" #> [1] \"ES\" \"MG\" \"RJ\" \"SP\" # Expected"},{"path":"https://danielvartan.github.io/orbis/reference/brazil_municipality.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Brazilian municipalities data — brazil_municipality","title":"Get Brazilian municipalities data — brazil_municipality","text":"brazil_municipality() returns tibble data Brazilian municipalities. Note: function requires internet connection work geobr geocodebr package installed, depending chosen method retrieving coordinates.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_municipality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Brazilian municipalities data — brazil_municipality","text":"","code":"brazil_municipality(   municipality = NULL,   state = NULL,   year = as.numeric(substr(Sys.Date(), 1, 4)),   coords_method = \"geobr\",   force = FALSE )"},{"path":"https://danielvartan.github.io/orbis/reference/brazil_municipality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Brazilian municipalities data — brazil_municipality","text":"municipality (optional) character vector name municipalities. NULL function returns municipalities (default: NULL). state (optional) character vector name states (default: NULL). year (optional) integerish number indicating year data regarding municipalities (default: Sys.Date() |> substr(1, 4) |> .numeric()). coords_method (optional) string indicating method retrieve latitude longitude coordinates municipalities. Options : \"geobr\": Uses read_municipal_seat() geobr package retrieve coordinates. \"geocodebr\": Uses geocode() geocodebr package retrieve coordinates. (default: \"geobr\"). force (optional) logical flag indicating whether force download data (default: FALSE).","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_municipality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Brazilian municipalities data — brazil_municipality","text":"tibble following columns: region_code: region code. region: region name. state_code: state code. state: state name. federal_unit: state abbreviation. municipality_code: municipality code. municipality: municipality name. latitude: municipality latitude. longitude: municipality longitude.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_municipality.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Brazilian municipalities data — brazil_municipality","text":"data function based data Brazilian Institute Geography Statistics (IBGE) via geobr geocodebr R packages. packages produced Brazil's Institute Applied Economic Research (IPEA) access Brazilian Institute Geography Statistics (IBGE) data.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/orbis/reference/brazil_municipality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Brazilian municipalities data — brazil_municipality","text":"","code":"if (FALSE) { # \\dontrun{   brazil_municipality() |> dplyr::glimpse()    brazil_municipality(municipality = \"Belém\")    brazil_municipality(municipality = \"Belém\", state = \"Pará\")    brazil_municipality(municipality = c(\"Belém\", \"São Paulo\")) } # }"},{"path":"https://danielvartan.github.io/orbis/reference/brazil_municipality_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Brazilian municipalities codes — brazil_municipality_code","title":"Get Brazilian municipalities codes — brazil_municipality_code","text":"brazil_municipality_code() returns vector codes Brazilian Institute Geography Statistics (IBGE) Brazilian municipalities.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_municipality_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Brazilian municipalities codes — brazil_municipality_code","text":"","code":"brazil_municipality_code(   municipality,   state = NULL,   year = as.numeric(substr(Sys.Date(), 1, 4)),   names = TRUE,   ... )"},{"path":"https://danielvartan.github.io/orbis/reference/brazil_municipality_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Brazilian municipalities codes — brazil_municipality_code","text":"municipality (optional) character vector name municipalities. NULL function returns municipalities (default: NULL). state (optional) character vector name states (default: NULL). year (optional) integerish number indicating year data regarding municipalities (default: Sys.Date() |> substr(1, 4) |> .numeric()). names (optional) logical flag indicating whether return names municipalities names vector (default: TRUE). ... (optional) Additional arguments passed brazil_municipality().","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_municipality_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Brazilian municipalities codes — brazil_municipality_code","text":"integer vector IBGE codes Brazilian municipalities.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_municipality_code.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Brazilian municipalities codes — brazil_municipality_code","text":"data function based data Brazilian Institute Geography Statistics (IBGE) via geobr R package. geobr package produced Brazil's Institute Applied Economic Research (IPEA) access Brazilian Institute Geography Statistics (IBGE) data. can see list geobr datasets running geobr::list_geobr().","code":""},{"path":[]},{"path":"https://danielvartan.github.io/orbis/reference/brazil_municipality_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Brazilian municipalities codes — brazil_municipality_code","text":"","code":"if (FALSE) { # \\dontrun{   brazil_municipality_code(municipality = \"Belém\")    brazil_municipality_code(municipality = \"Belém\", names = FALSE)    brazil_municipality_code(municipality = \"Belém\", state = \"Pará\")    brazil_municipality_code(c(\"Rio de Janeiro\", \"São Paulo\")) } # }"},{"path":"https://danielvartan.github.io/orbis/reference/brazil_municipality_coords.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Brazilian municipalities geographic coordinates — brazil_municipality_coords","title":"Get Brazilian municipalities geographic coordinates — brazil_municipality_coords","text":"brazil_municipality_coords() returns tibble latitude longitude coordinates Brazilian municipalities. Note: function requires internet connection work geobr geocodebr package installed, depending chosen method retrieving coordinates.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_municipality_coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Brazilian municipalities geographic coordinates — brazil_municipality_coords","text":"","code":"brazil_municipality_coords(   municipality_code = NULL,   year = as.numeric(substr(Sys.Date(), 1, 4)),   coords_method = \"geobr\",   force = FALSE )"},{"path":"https://danielvartan.github.io/orbis/reference/brazil_municipality_coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Brazilian municipalities geographic coordinates — brazil_municipality_coords","text":"municipality_code (optional) integerish vector IBGE codes Brazilian municipalities. Use brazil_municipality_code() obtain codes municipality names states. NULL function returns municipalities (default: NULL). year (optional) integerish number indicating year data regarding municipalities (default: Sys.Date() |> substr(1, 4) |> .numeric()). coords_method (optional) string indicating method retrieve latitude longitude coordinates municipalities. Options : \"geobr\": Uses read_municipal_seat() geobr package retrieve coordinates. \"geocodebr\": Uses geocode() geocodebr package retrieve coordinates. (default: \"geobr\"). force (optional) logical flag indicating whether force download data (default: FALSE).","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_municipality_coords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Brazilian municipalities geographic coordinates — brazil_municipality_coords","text":"tibble following columns: municipality_code: municipality code. latitude: municipality latitude. longitude: municipality longitude.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_municipality_coords.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Brazilian municipalities geographic coordinates — brazil_municipality_coords","text":"data function based data Brazilian Institute Geography Statistics (IBGE) via geobr geocodebr R packages. packages produced Brazil's Institute Applied Economic Research (IPEA) access Brazilian Institute Geography Statistics (IBGE) data.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/orbis/reference/brazil_municipality_coords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Brazilian municipalities geographic coordinates — brazil_municipality_coords","text":"","code":"if (FALSE) { # \\dontrun{   brazil_municipality_coords() |> dplyr::glimpse()    brazil_municipality_coords(municipality_code = 3550308)    brazil_municipality_coords(municipality_code = 3550)    brazil_municipality_coords(municipality_code = c(3550308, 3304557)) } # }"},{"path":"https://danielvartan.github.io/orbis/reference/brazil_municipality_latitude.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Brazilian municipalities latitude — brazil_municipality_latitude","title":"Get Brazilian municipalities latitude — brazil_municipality_latitude","text":"brazil_municipality_latitude() returns latitude Brazilian municipalities.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_municipality_latitude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Brazilian municipalities latitude — brazil_municipality_latitude","text":"","code":"brazil_municipality_latitude(   municipality_code,   year = as.numeric(substr(Sys.Date(), 1, 4)),   coords_method = \"geobr\",   names = TRUE,   ... )"},{"path":"https://danielvartan.github.io/orbis/reference/brazil_municipality_latitude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Brazilian municipalities latitude — brazil_municipality_latitude","text":"municipality_code integerish vector IBGE codes Brazilian municipalities. Use brazil_municipality_code() obtain codes municipality names states. year (optional) integerish number indicating year data regarding municipalities (default: Sys.Date() |> substr(1, 4) |> .numeric()). coords_method (optional) string indicating method retrieve latitude longitude coordinates municipalities. Options : \"geobr\": Uses read_municipal_seat() geobr package retrieve coordinates. \"geocodebr\": Uses geocode() geocodebr package retrieve coordinates. (default: \"geobr\"). names (optional) logical flag indicating whether return names municipalities names vector (default: TRUE). ... (optional) Additional arguments passed brazil_municipality().","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_municipality_latitude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Brazilian municipalities latitude — brazil_municipality_latitude","text":"numeric vector latitude Brazilian municipalities.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_municipality_latitude.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Brazilian municipalities latitude — brazil_municipality_latitude","text":"data function based data Brazilian Institute Geography Statistics (IBGE) via geobr R package. geobr package produced Brazil's Institute Applied Economic Research (IPEA) access Brazilian Institute Geography Statistics (IBGE) data. can see list geobr datasets running geobr::list_geobr().","code":""},{"path":[]},{"path":"https://danielvartan.github.io/orbis/reference/brazil_municipality_latitude.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Brazilian municipalities latitude — brazil_municipality_latitude","text":"","code":"if (FALSE) { # \\dontrun{   brazil_municipality_latitude(3550308)    brazil_municipality_latitude(c(3550308, 3500204))    brazil_municipality_latitude(c(3550308, 1000, 3500204))    brazil_municipality_latitude(c(3550308, NA, 3500204)) } # }"},{"path":"https://danielvartan.github.io/orbis/reference/brazil_municipality_longitude.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Brazilian municipalities longitude — brazil_municipality_longitude","title":"Get Brazilian municipalities longitude — brazil_municipality_longitude","text":"brazil_municipality_longitude() returns longitude Brazilian municipalities.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_municipality_longitude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Brazilian municipalities longitude — brazil_municipality_longitude","text":"","code":"brazil_municipality_longitude(   municipality_code,   year = as.numeric(substr(Sys.Date(), 1, 4)),   coords_method = \"geobr\",   names = TRUE,   ... )"},{"path":"https://danielvartan.github.io/orbis/reference/brazil_municipality_longitude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Brazilian municipalities longitude — brazil_municipality_longitude","text":"municipality_code integerish vector IBGE codes Brazilian municipalities. Use brazil_municipality_code() obtain codes municipality names states. year (optional) integerish number indicating year data regarding municipalities (default: Sys.Date() |> substr(1, 4) |> .numeric()). coords_method (optional) string indicating method retrieve latitude longitude coordinates municipalities. Options : \"geobr\": Uses read_municipal_seat() geobr package retrieve coordinates. \"geocodebr\": Uses geocode() geocodebr package retrieve coordinates. (default: \"geobr\"). names (optional) logical flag indicating whether return names municipalities names vector (default: TRUE). ... (optional) Additional arguments passed brazil_municipality().","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_municipality_longitude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Brazilian municipalities longitude — brazil_municipality_longitude","text":"numeric vector longitude Brazilian municipalities.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_municipality_longitude.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Brazilian municipalities longitude — brazil_municipality_longitude","text":"data function based data Brazilian Institute Geography Statistics (IBGE) via geobr R package. geobr package produced Brazil's Institute Applied Economic Research (IPEA) access Brazilian Institute Geography Statistics (IBGE) data. can see list geobr datasets running geobr::list_geobr().","code":""},{"path":[]},{"path":"https://danielvartan.github.io/orbis/reference/brazil_municipality_longitude.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Brazilian municipalities longitude — brazil_municipality_longitude","text":"","code":"if (FALSE) { # \\dontrun{   brazil_municipality_longitude(3550308)    brazil_municipality_longitude(c(3550308, 3500204))    brazil_municipality_longitude(c(3550308, 1000, 3500204))    brazil_municipality_longitude(c(3550308, NA, 3500204)) } # }"},{"path":"https://danielvartan.github.io/orbis/reference/brazil_region.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Brazilian regions — brazil_region","title":"Get Brazilian regions — brazil_region","text":"brazil_region() returns vector names Brazilian regions.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_region.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Brazilian regions — brazil_region","text":"","code":"brazil_region(x = NULL)"},{"path":"https://danielvartan.github.io/orbis/reference/brazil_region.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Brazilian regions — brazil_region","text":"x (optional) atomic vector containing names, abbreviations, numeric codes Brazilian states federal units. Region municipality codes also supported. NULL, returns vector Brazilian regions. (default: NULL)","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_region.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Brazilian regions — brazil_region","text":"character vector names Brazilian regions.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_region.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Brazilian regions — brazil_region","text":"data function based data Brazilian Institute Geography Statistics (IBGE, n.d.).","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_region.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Brazilian regions — brazil_region","text":"Instituto Brasileiro de Geografia e Estatística. (n.d.). Território [Territory] [Dataset]. SIDRA. https://sidra.ibge.gov.br/territorio","code":""},{"path":[]},{"path":"https://danielvartan.github.io/orbis/reference/brazil_region.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Brazilian regions — brazil_region","text":"","code":"brazil_region() #> [1] \"North\"        \"Northeast\"    \"South\"        \"Southeast\"    \"Central-West\" #> [1] \"North\" \"Northeast\" \"South\" \"Southeast\" \"Central-West\" # Expected  brazil_region(\"sp\") #> [1] \"Southeast\" #> [1] \"Southeast\" # Expected  brazil_region(\"sao paulo\") #> [1] \"Southeast\" #> [1] \"Southeast\" # Expected  brazil_region(c(1, 4)) #> [1] \"North\" \"South\" #> [1] \"North\" \"South\" # Expected  brazil_region(35) # State of São Paulo #> [1] \"Southeast\" #> [1] \"Southeast\" # Expected  brazil_region(3550308) # Municipality of São Paulo #> [1] \"Southeast\" #> [1] \"Southeast\" # Expected  brazil_region(35503081) # >7 digits #> [1] NA #> [1] NA # Expected"},{"path":"https://danielvartan.github.io/orbis/reference/brazil_region_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Brazilian region codes — brazil_region_code","title":"Get Brazilian region codes — brazil_region_code","text":"brazil_region_code() returns vector Brazilian Institute Geography Statistics (IBGE) codes Brazilian regions.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_region_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Brazilian region codes — brazil_region_code","text":"","code":"brazil_region_code(x = NULL)"},{"path":"https://danielvartan.github.io/orbis/reference/brazil_region_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Brazilian region codes — brazil_region_code","text":"x (optional) character vector containing names Brazilian regions, states, federal units. NULL, returns named vector Brazilian region codes (default: NULL).","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_region_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Brazilian region codes — brazil_region_code","text":"integer vector IBGE codes Brazilian regions.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_region_code.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Brazilian region codes — brazil_region_code","text":"data function based data Brazilian Institute Geography Statistics (IBGE, n.d.).","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_region_code.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Brazilian region codes — brazil_region_code","text":"Instituto Brasileiro de Geografia e Estatística. (n.d.). Território [Territory] [Dataset]. SIDRA. https://sidra.ibge.gov.br/territorio","code":""},{"path":[]},{"path":"https://danielvartan.github.io/orbis/reference/brazil_region_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Brazilian region codes — brazil_region_code","text":"","code":"brazil_region_code() #>        North    Northeast    Southeast        South Central-West  #>            1            2            3            4            5   brazil_region_code(\"north\") #> [1] 1 #> [1] 1 # Expected  brazil_region_code(c(\"north\", \"central-west\")) #> [1] 1 5 #> [1] 1 5 # Expected  brazil_region_code(\"sao paulo\") #> [1] 3 #> [1] 3 # Expected  brazil_region_code(\"sp\") #> [1] 3 #> [1] 3 # Expected"},{"path":"https://danielvartan.github.io/orbis/reference/brazil_render_address.html","id":null,"dir":"Reference","previous_headings":"","what":"Render Brazilian addresses — brazil_render_address","title":"Render Brazilian addresses — brazil_render_address","text":"brazil_render_address() returns vector formatted Brazilian addresses. Note: function requires glue package installed.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_render_address.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render Brazilian addresses — brazil_render_address","text":"","code":"brazil_render_address(   street = NA_character_,   complement = NA_character_,   neighborhood = NA_character_,   municipality = NA_character_,   state = NA_character_,   postal_code = NA_character_ )"},{"path":"https://danielvartan.github.io/orbis/reference/brazil_render_address.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render Brazilian addresses — brazil_render_address","text":"street (optional) character vector street names (default: NA_character). complement (optional) character vector complement address (default: NA_character). neighborhood (optional) character vector neighborhood names (default: NA_character). municipality (optional) character vector name municipalities (default: NA_character). state (optional) character vector name states (default: NA_character). postal_code (optional) character vector postal codes (default: NA_character).","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_render_address.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render Brazilian addresses — brazil_render_address","text":"character vector formatted address.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/orbis/reference/brazil_render_address.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render Brazilian addresses — brazil_render_address","text":"","code":"brazil_render_address(   street = c(\"Viaduto do Chá, 15\", \"Alameda Ribeiro da Silva, 919\"),   complement = c(\"\", \"Ap. 502\"),   neighborhood = c(\"Centro\", \"Campos Elíseos\"),   municipality = c(\"São Paulo\", \"São Paulo\"),   state = c(\"SP\", \"SP\"),   postal_code = c(\"01002-020\", \"01217-010\") ) #> [1] \"Viaduto do Chá, 15, Centro, São Paulo-SP, 01002-020, Brasil\"                             #> [2] \"Alameda Ribeiro da Silva, 919, Ap. 502, Campos Elíseos, São Paulo-SP, 01217-010, Brasil\""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Brazilian state names — brazil_state","title":"Get Brazilian state names — brazil_state","text":"brazil_state() returns vector names Brazilian states.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Brazilian state names — brazil_state","text":"","code":"brazil_state(x = NULL)"},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Brazilian state names — brazil_state","text":"x (optional) atomic vector containing names numeric codes Brazilian regions federal units. Municipality codes also supported. NULL, returns character vector Brazilian state names (default: NULL).","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Brazilian state names — brazil_state","text":"character vector names Brazilian states.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Brazilian state names — brazil_state","text":"data function based data Brazilian Institute Geography Statistics (IBGE, n.d.).","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Brazilian state names — brazil_state","text":"Instituto Brasileiro de Geografia e Estatística. (n.d.). Território [Territory] [Dataset]. SIDRA. https://sidra.ibge.gov.br/territorio","code":""},{"path":[]},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Brazilian state names — brazil_state","text":"","code":"brazil_state() #>  [1] \"Acre\"                \"Alagoas\"             \"Amapá\"               #>  [4] \"Amazonas\"            \"Bahia\"               \"Ceará\"               #>  [7] \"Distrito Federal\"    \"Espírito Santo\"      \"Goiás\"               #> [10] \"Maranhão\"            \"Mato Grosso\"         \"Mato Grosso do Sul\"  #> [13] \"Minas Gerais\"        \"Pará\"                \"Paraíba\"             #> [16] \"Paraná\"              \"Pernambuco\"          \"Piauí\"               #> [19] \"Rio de Janeiro\"      \"Rio Grande do Norte\" \"Rio Grande do Sul\"   #> [22] \"Rondônia\"            \"Roraima\"             \"Santa Catarina\"      #> [25] \"São Paulo\"           \"Sergipe\"             \"Tocantins\"            brazil_state(\"rj\") #> [1] \"Rio de Janeiro\" #> [1] \"Rio de Janeiro\" # Expected  brazil_state(\"rio de janeiro\") #> [1] \"Rio de Janeiro\" #> [1] \"Rio de Janeiro\" # Expected  brazil_state(33) #> [1] \"Rio de Janeiro\" #> [1] \"Rio de Janeiro\" # Expected  brazil_state(3302700) # Maricá #> [1] \"Rio de Janeiro\" #> [1] \"Rio de Janeiro\" # Expected  brazil_state(33027001) # >7 digits #> [1] NA #> [1] NA # Expected  brazil_state(39027001) # Non-existent state code #> [1] NA #> [1] NA # Expected  brazil_state(\"southeast\") #> [1] \"Espírito Santo\" \"Minas Gerais\"   \"Rio de Janeiro\" \"São Paulo\"      #> [1] \"Espírito Santo\" \"Minas Gerais\"   \"Rio de Janeiro\" # Expected #> [4] \"São Paulo\"  brazil_state(3) #> [1] \"Espírito Santo\" \"Minas Gerais\"   \"Rio de Janeiro\" \"São Paulo\"      #> [1] \"Espírito Santo\" \"Minas Gerais\"   \"Rio de Janeiro\" # Expected #> [4] \"São Paulo\""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state_by_utc.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Brazilian state names by UTC — brazil_state_by_utc","title":"Get Brazilian state names by UTC — brazil_state_by_utc","text":"brazil_state_by_utc() returns vector names Brazilian states abbreviations Brazilian federal units UTC offset.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state_by_utc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Brazilian state names by UTC — brazil_state_by_utc","text":"","code":"brazil_state_by_utc(utc = -3, type = \"fu\")"},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state_by_utc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Brazilian state names by UTC — brazil_state_by_utc","text":"utc (optional) integerish number UTC offset. Available choices -5, -4, -3, -2 (default: -3). type (optional) character string specifying type value return. Available choices \"state\" \"fu\" (default: \"fu\").","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state_by_utc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Brazilian state names by UTC — brazil_state_by_utc","text":"character vector names Brazilian states abbreviations Brazilian federal units.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state_by_utc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Brazilian state names by UTC — brazil_state_by_utc","text":"data function based 2024b dataset (Released 2024-09-04) Internet Assigned Numbers Authority (IANA, 2024)","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state_by_utc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Brazilian state names by UTC — brazil_state_by_utc","text":"Internet Assigned Numbers Authority. (2024). Time zone database (. 2024b) [Dataset]. https://www.iana.org/time-zones","code":""},{"path":[]},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state_by_utc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Brazilian state names by UTC — brazil_state_by_utc","text":"","code":"brazil_state_by_utc(-3, type = \"fu\") #>  [1] \"AL\" \"AP\" \"BA\" \"CE\" \"DF\" \"ES\" \"GO\" \"MA\" \"MG\" \"PA\" \"PB\" \"PR\" \"PE\" \"PI\" \"RJ\" #> [16] \"RN\" \"RS\" \"SC\" \"SP\" \"SE\" \"TO\"  brazil_state_by_utc(-3, type = \"state\") #>  [1] \"Alagoas\"             \"Amapá\"               \"Bahia\"               #>  [4] \"Ceará\"               \"Distrito Federal\"    \"Espírito Santo\"      #>  [7] \"Goiás\"               \"Maranhão\"            \"Minas Gerais\"        #> [10] \"Pará\"                \"Paraíba\"             \"Paraná\"              #> [13] \"Pernambuco\"          \"Piauí\"               \"Rio de Janeiro\"      #> [16] \"Rio Grande do Norte\" \"Rio Grande do Sul\"   \"Santa Catarina\"      #> [19] \"São Paulo\"           \"Sergipe\"             \"Tocantins\""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state_capital.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Brazilian state capital names — brazil_state_capital","title":"Get Brazilian state capital names — brazil_state_capital","text":"brazil_state_capital() returns vector capital names Brazilian states federal units.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state_capital.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Brazilian state capital names — brazil_state_capital","text":"","code":"brazil_state_capital(x = NULL)"},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state_capital.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Brazilian state capital names — brazil_state_capital","text":"x (optional) atomic vector containing names Brazilian states federal units. Municipality state codes also supported. NULL, returns vector state capital names (default: NULL).","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state_capital.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Brazilian state capital names — brazil_state_capital","text":"character vector names Brazilian state capitals.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state_capital.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Brazilian state capital names — brazil_state_capital","text":"data function based data Brazilian Institute Geography Statistics (IBGE, n.d.).","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state_capital.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Brazilian state capital names — brazil_state_capital","text":"Instituto Brasileiro de Geografia e Estatística. (n.d.). Território [Territory] [Dataset]. SIDRA. https://sidra.ibge.gov.br/territorio","code":""},{"path":[]},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state_capital.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Brazilian state capital names — brazil_state_capital","text":"","code":"brazil_state_capital() #>                Acre             Alagoas               Amapá            Amazonas  #>        \"Rio Branco\"            \"Maceió\"            \"Macapá\"            \"Manaus\"  #>               Bahia               Ceará    Distrito Federal      Espírito Santo  #>          \"Salvador\"         \"Fortaleza\"          \"Brasília\"           \"Vitória\"  #>               Goiás            Maranhão         Mato Grosso  Mato Grosso do Sul  #>           \"Goiânia\"          \"São Luís\"            \"Cuiabá\"      \"Campo Grande\"  #>        Minas Gerais                Pará             Paraíba              Paraná  #>    \"Belo Horizonte\"             \"Belém\"       \"João Pessoa\"          \"Curitiba\"  #>          Pernambuco               Piauí      Rio de Janeiro Rio Grande do Norte  #>            \"Recife\"          \"Teresina\"    \"Rio de Janeiro\"             \"Natal\"  #>   Rio Grande do Sul            Rondônia             Roraima      Santa Catarina  #>      \"Porto Alegre\"       \"Porto Velho\"         \"Boa Vista\"     \"Florianópolis\"  #>           São Paulo             Sergipe           Tocantins  #>         \"São Paulo\"           \"Aracaju\"            \"Palmas\"   brazil_state_capital(\"pi\") #> [1] \"Teresina\" #> [1] \"Teresina\" # Expected  brazil_state_capital(\"piaui\") #> [1] \"Teresina\" #> [1] \"Teresina\" # Expected  brazil_state_capital(22) #> [1] \"Teresina\" #> [1] \"Teresina\" # Expected  brazil_state_capital(2211001) # Teresina #> [1] \"Teresina\" #> [1] \"Teresina\" # Expected  brazil_state_capital(22110011) # >7 digits #> [1] NA #> [1] NA # Expected  brazil_state_capital(3912345) # Non-existent state code #> [1] NA #> [1] NA # Expected"},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Brazilian state codes — brazil_state_code","title":"Get Brazilian state codes — brazil_state_code","text":"brazil_state_code() returns vector Brazilian Institute Geography Statistics (IBGE) codes Brazilian states.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Brazilian state codes — brazil_state_code","text":"","code":"brazil_state_code(x = NULL)"},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Brazilian state codes — brazil_state_code","text":"x (optional) atomic vector containing names Brazilian states federal units. Municipality codes also supported. NULL, returns vector state codes (default: NULL).","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Brazilian state codes — brazil_state_code","text":"integer vector IBGE codes Brazilian states.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state_code.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Brazilian state codes — brazil_state_code","text":"data function based data Brazilian Institute Geography Statistics (IBGE, n.d.).","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state_code.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Brazilian state codes — brazil_state_code","text":"Instituto Brasileiro de Geografia e Estatística. (n.d.). Território [Territory] [Dataset]. SIDRA. https://sidra.ibge.gov.br/territorio","code":""},{"path":[]},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Brazilian state codes — brazil_state_code","text":"","code":"brazil_state_code() #>                Acre             Alagoas               Amapá            Amazonas  #>                  12                  27                  16                  13  #>               Bahia               Ceará    Distrito Federal      Espírito Santo  #>                  29                  23                  53                  32  #>               Goiás            Maranhão         Mato Grosso  Mato Grosso do Sul  #>                  52                  21                  51                  50  #>        Minas Gerais                Pará             Paraíba              Paraná  #>                  31                  15                  25                  41  #>          Pernambuco               Piauí      Rio de Janeiro Rio Grande do Norte  #>                  26                  22                  33                  24  #>   Rio Grande do Sul            Rondônia             Roraima      Santa Catarina  #>                  43                  11                  14                  42  #>           São Paulo             Sergipe           Tocantins  #>                  35                  28                  17   brazil_state_code(\"ac\") #> [1] 12 #> [1] 12 # Expected  brazil_state_code(\"acre\") #> [1] 12 #> [1] 12 # Expected  brazil_state_code(3550308) # São Paulo #> [1] 35 #> [1] 35 # Expected  brazil_state_code(35503081) # >7 digits #> [1] NA #> [1] NA # Expected  brazil_state_code(3912345) # Non-existent state code #> [1] NA #> [1] NA # Expected"},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state_latitude.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Brazilian state latitude — brazil_state_latitude","title":"Get Brazilian state latitude — brazil_state_latitude","text":"brazil_state_latitude() returns vector latitude Brazilian state capitals.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state_latitude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Brazilian state latitude — brazil_state_latitude","text":"","code":"brazil_state_latitude(x = NULL)"},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state_latitude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Brazilian state latitude — brazil_state_latitude","text":"x (optional) atomic vector containing names Brazilian states federal units. Municipality state codes also supported. NULL, returns vector state latitudes (default: NULL).","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state_latitude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Brazilian state latitude — brazil_state_latitude","text":"character vector latitude Brazilian state capitals.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state_latitude.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Brazilian state latitude — brazil_state_latitude","text":"data function based Google's Geocoding API gathered via tidygeocoder R package.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state_latitude.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Brazilian state latitude — brazil_state_latitude","text":"","code":"brazil_state_latitude() #>                Acre             Alagoas               Amapá            Amazonas  #>          -9.9765362          -9.6476843           0.0401529          -3.1316333  #>               Bahia               Ceará    Distrito Federal      Espírito Santo  #>         -12.9822499          -3.7304512         -15.7934036         -20.3200917  #>               Goiás            Maranhão         Mato Grosso  Mato Grosso do Sul  #>         -16.6808820          -2.5295265         -15.5986686         -20.4640173  #>        Minas Gerais                Pará             Paraíba              Paraná  #>         -19.9227318          -1.4505600          -7.1215981         -25.4295963  #>          Pernambuco               Piauí      Rio de Janeiro Rio Grande do Norte  #>          -8.0584933          -5.0874608         -22.9110137          -5.8053980  #>   Rio Grande do Sul            Rondônia             Roraima      Santa Catarina  #>         -30.0324999          -8.7494525           2.8208478         -27.5973002  #>           São Paulo             Sergipe           Tocantins  #>         -23.5506507         -10.9162061         -10.1837852   brazil_state_latitude(\"sp\") #> [1] -23.55065 #> [1] -23.55065 # Expected  brazil_state_latitude(\"sao paulo\") #> [1] -23.55065 #> [1] -23.55065 # Expected  brazil_state_latitude(35) # State of São Paulo #> [1] -23.55065 #> [1] -23.55065 # Expected  brazil_state_latitude(3550308) # Municipality of São Paulo #> [1] -23.55065 #> [1] -23.55065 # Expected  brazil_state_latitude(35503081) # >7 digits #> [1] NA #> [1] NA # Expected  brazil_state_latitude(3912345) # Non-existent state code #> [1] NA #> [1] NA # Expected"},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state_longitude.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Brazilian state longitude — brazil_state_longitude","title":"Get Brazilian state longitude — brazil_state_longitude","text":"brazil_state_longitude() returns vector longitude Brazilian state capitals.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state_longitude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Brazilian state longitude — brazil_state_longitude","text":"","code":"brazil_state_longitude(x = NULL)"},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state_longitude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Brazilian state longitude — brazil_state_longitude","text":"x (optional) atomic vector containing names Brazilian states federal units. Municipality state codes also supported. NULL, returns vector state longitudes (default: NULL).","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state_longitude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Brazilian state longitude — brazil_state_longitude","text":"character vector longitude Brazilian state capitals.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state_longitude.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Brazilian state longitude — brazil_state_longitude","text":"data function based Google's Geocoding API gathered via tidygeocoder R package.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/orbis/reference/brazil_state_longitude.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Brazilian state longitude — brazil_state_longitude","text":"","code":"brazil_state_longitude() #>                Acre             Alagoas               Amapá            Amazonas  #>           -67.82208           -35.73393           -51.05696           -59.98250  #>               Bahia               Ceará    Distrito Federal      Espírito Santo  #>           -38.48128           -38.52180           -47.88232           -40.33767  #>               Goiás            Maranhão         Mato Grosso  Mato Grosso do Sul  #>           -49.25327           -44.29639           -56.09913           -54.61629  #>        Minas Gerais                Pará             Paraíba              Paraná  #>           -43.94509           -48.46825           -34.88203           -49.27127  #>          Pernambuco               Piauí      Rio de Janeiro Rio Grande do Norte  #>           -34.88482           -42.80496           -43.20937           -35.20809  #>   Rio Grande do Sul            Rondônia             Roraima      Santa Catarina  #>           -51.23038           -63.87354           -60.67196           -48.54961  #>           São Paulo             Sergipe           Tocantins  #>           -46.63338           -37.07747           -48.33364   brazil_state_longitude(\"sp\") #> [1] -46.63338 #> [1] -46.63338 # Expected  brazil_state_longitude(\"sao paulo\") #> [1] -46.63338 #> [1] -46.63338 # Expected  brazil_state_longitude(35) # State of São Paulo #> [1] -46.63338 #> [1] -46.63338 # Expected  brazil_state_longitude(3550308) # Municipality of São Paulo #> [1] -46.63338 #> [1] -46.63338 # Expected  brazil_state_longitude(35503081) # >7 digits #> [1] NA #> [1] NA # Expected  brazil_state_longitude(3912345) # Non-existent state code #> [1] NA #> [1] NA # Expected"},{"path":"https://danielvartan.github.io/orbis/reference/closest_geobr_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the closest year available in the geobr package — closest_geobr_year","title":"Get the closest year available in the geobr package — closest_geobr_year","text":"closest_geobr_year() returns closest year available geobr package specified type data.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/closest_geobr_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the closest year available in the geobr package — closest_geobr_year","text":"","code":"closest_geobr_year(year, type = \"country\", verbose = TRUE)"},{"path":"https://danielvartan.github.io/orbis/reference/closest_geobr_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the closest year available in the geobr package — closest_geobr_year","text":"year integerish vector year find closest available year geobr package. type (optional) string indicating type data find closest year . can one following: \"municipality\", \"municipal_seat\", \"state\", \"country\" (default: \"country\"). verbose (optional) logical flag indicating whether print warning message specified year available geobr package. applicable year single value (default: TRUE).","code":""},{"path":"https://danielvartan.github.io/orbis/reference/closest_geobr_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the closest year available in the geobr package — closest_geobr_year","text":"numeric vector closest year available geobr package specified type data.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/orbis/reference/closest_geobr_year.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the closest year available in the geobr package — closest_geobr_year","text":"","code":"closest_geobr_year(2025, type = \"municipality\") #> ! The closest map year to 2025 is 2022. Using year 2022 instead. #> [1] 2022 #> [1] 2022 # Expected  closest_geobr_year(2025, type = \"state\") #> ! The closest map year to 2025 is 2020. Using year 2020 instead. #> [1] 2020 #> [1] 2020 # Expected  closest_geobr_year(2025, type = \"country\") #> ! The closest map year to 2025 is 2020. Using year 2020 instead. #> [1] 2020 #> [1] 2020 # Expected  closest_geobr_year(c(2025, 1999, NA, 1800), type = \"country\") #> [1] 2020 2000   NA 1872 #> [1] 2020 2000   NA 1872 # Expected"},{"path":"https://danielvartan.github.io/orbis/reference/country_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get country names — country_names","title":"Get country names — country_names","text":"country_names() returns vector names codes countries present ISO 3166-1 standard. Note: function requires ISOcodes package installed.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/country_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get country names — country_names","text":"","code":"country_names(format = \"common name\")"},{"path":"https://danielvartan.github.io/orbis/reference/country_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get country names — country_names","text":"format (optional) character string indicating format returned. options : \"name\": name country. \"common name\": common name country. \"official name\": official name country. \"alpha 2\": two-letter country code. \"alpha 3\": three-letter country code. \"numeric\": numeric country code.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/country_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get country names — country_names","text":"character vector names codes countries present ISO 3166-1 standard.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/country_names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get country names — country_names","text":"data function based data International Organization Standardization (ISO) (ISO 3166-1) via ISOcodes R package. Click learn . ISOcodes R package uses XML files provided Debian's iso-codes package data.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/country_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get country names — country_names","text":"","code":"country_names(format = \"alpha 3\") #>                                        Aruba  #>                                        \"ABW\"  #>                                  Afghanistan  #>                                        \"AFG\"  #>                                       Angola  #>                                        \"AGO\"  #>                                     Anguilla  #>                                        \"AIA\"  #>                                Åland Islands  #>                                        \"ALA\"  #>                                      Albania  #>                                        \"ALB\"  #>                                      Andorra  #>                                        \"AND\"  #>                         United Arab Emirates  #>                                        \"ARE\"  #>                                    Argentina  #>                                        \"ARG\"  #>                                      Armenia  #>                                        \"ARM\"  #>                               American Samoa  #>                                        \"ASM\"  #>                                   Antarctica  #>                                        \"ATA\"  #>                  French Southern Territories  #>                                        \"ATF\"  #>                          Antigua and Barbuda  #>                                        \"ATG\"  #>                                    Australia  #>                                        \"AUS\"  #>                                      Austria  #>                                        \"AUT\"  #>                                   Azerbaijan  #>                                        \"AZE\"  #>                                      Burundi  #>                                        \"BDI\"  #>                                      Belgium  #>                                        \"BEL\"  #>                                        Benin  #>                                        \"BEN\"  #>             Bonaire, Sint Eustatius and Saba  #>                                        \"BES\"  #>                                 Burkina Faso  #>                                        \"BFA\"  #>                                   Bangladesh  #>                                        \"BGD\"  #>                                     Bulgaria  #>                                        \"BGR\"  #>                                      Bahrain  #>                                        \"BHR\"  #>                                      Bahamas  #>                                        \"BHS\"  #>                       Bosnia and Herzegovina  #>                                        \"BIH\"  #>                             Saint Barthélemy  #>                                        \"BLM\"  #>                                      Belarus  #>                                        \"BLR\"  #>                                       Belize  #>                                        \"BLZ\"  #>                                      Bermuda  #>                                        \"BMU\"  #>              Bolivia, Plurinational State of  #>                                        \"BOL\"  #>                                       Brazil  #>                                        \"BRA\"  #>                                     Barbados  #>                                        \"BRB\"  #>                            Brunei Darussalam  #>                                        \"BRN\"  #>                                       Bhutan  #>                                        \"BTN\"  #>                                Bouvet Island  #>                                        \"BVT\"  #>                                     Botswana  #>                                        \"BWA\"  #>                     Central African Republic  #>                                        \"CAF\"  #>                                       Canada  #>                                        \"CAN\"  #>                      Cocos (Keeling) Islands  #>                                        \"CCK\"  #>                                  Switzerland  #>                                        \"CHE\"  #>                                        Chile  #>                                        \"CHL\"  #>                                        China  #>                                        \"CHN\"  #>                                Côte d'Ivoire  #>                                        \"CIV\"  #>                                     Cameroon  #>                                        \"CMR\"  #>        Congo, The Democratic Republic of the  #>                                        \"COD\"  #>                                        Congo  #>                                        \"COG\"  #>                                 Cook Islands  #>                                        \"COK\"  #>                                     Colombia  #>                                        \"COL\"  #>                                      Comoros  #>                                        \"COM\"  #>                                   Cabo Verde  #>                                        \"CPV\"  #>                                   Costa Rica  #>                                        \"CRI\"  #>                                         Cuba  #>                                        \"CUB\"  #>                                      Curaçao  #>                                        \"CUW\"  #>                             Christmas Island  #>                                        \"CXR\"  #>                               Cayman Islands  #>                                        \"CYM\"  #>                                       Cyprus  #>                                        \"CYP\"  #>                                      Czechia  #>                                        \"CZE\"  #>                                      Germany  #>                                        \"DEU\"  #>                                     Djibouti  #>                                        \"DJI\"  #>                                     Dominica  #>                                        \"DMA\"  #>                                      Denmark  #>                                        \"DNK\"  #>                           Dominican Republic  #>                                        \"DOM\"  #>                                      Algeria  #>                                        \"DZA\"  #>                                      Ecuador  #>                                        \"ECU\"  #>                                        Egypt  #>                                        \"EGY\"  #>                                      Eritrea  #>                                        \"ERI\"  #>                               Western Sahara  #>                                        \"ESH\"  #>                                        Spain  #>                                        \"ESP\"  #>                                      Estonia  #>                                        \"EST\"  #>                                     Ethiopia  #>                                        \"ETH\"  #>                                      Finland  #>                                        \"FIN\"  #>                                         Fiji  #>                                        \"FJI\"  #>                  Falkland Islands (Malvinas)  #>                                        \"FLK\"  #>                                       France  #>                                        \"FRA\"  #>                                Faroe Islands  #>                                        \"FRO\"  #>              Micronesia, Federated States of  #>                                        \"FSM\"  #>                                        Gabon  #>                                        \"GAB\"  #>                               United Kingdom  #>                                        \"GBR\"  #>                                      Georgia  #>                                        \"GEO\"  #>                                     Guernsey  #>                                        \"GGY\"  #>                                        Ghana  #>                                        \"GHA\"  #>                                    Gibraltar  #>                                        \"GIB\"  #>                                       Guinea  #>                                        \"GIN\"  #>                                   Guadeloupe  #>                                        \"GLP\"  #>                                       Gambia  #>                                        \"GMB\"  #>                                Guinea-Bissau  #>                                        \"GNB\"  #>                            Equatorial Guinea  #>                                        \"GNQ\"  #>                                       Greece  #>                                        \"GRC\"  #>                                      Grenada  #>                                        \"GRD\"  #>                                    Greenland  #>                                        \"GRL\"  #>                                    Guatemala  #>                                        \"GTM\"  #>                                French Guiana  #>                                        \"GUF\"  #>                                         Guam  #>                                        \"GUM\"  #>                                       Guyana  #>                                        \"GUY\"  #>                                    Hong Kong  #>                                        \"HKG\"  #>            Heard Island and McDonald Islands  #>                                        \"HMD\"  #>                                     Honduras  #>                                        \"HND\"  #>                                      Croatia  #>                                        \"HRV\"  #>                                        Haiti  #>                                        \"HTI\"  #>                                      Hungary  #>                                        \"HUN\"  #>                                    Indonesia  #>                                        \"IDN\"  #>                                  Isle of Man  #>                                        \"IMN\"  #>                                        India  #>                                        \"IND\"  #>               British Indian Ocean Territory  #>                                        \"IOT\"  #>                                      Ireland  #>                                        \"IRL\"  #>                    Iran, Islamic Republic of  #>                                        \"IRN\"  #>                                         Iraq  #>                                        \"IRQ\"  #>                                      Iceland  #>                                        \"ISL\"  #>                                       Israel  #>                                        \"ISR\"  #>                                        Italy  #>                                        \"ITA\"  #>                                      Jamaica  #>                                        \"JAM\"  #>                                       Jersey  #>                                        \"JEY\"  #>                                       Jordan  #>                                        \"JOR\"  #>                                        Japan  #>                                        \"JPN\"  #>                                   Kazakhstan  #>                                        \"KAZ\"  #>                                        Kenya  #>                                        \"KEN\"  #>                                   Kyrgyzstan  #>                                        \"KGZ\"  #>                                     Cambodia  #>                                        \"KHM\"  #>                                     Kiribati  #>                                        \"KIR\"  #>                        Saint Kitts and Nevis  #>                                        \"KNA\"  #>                           Korea, Republic of  #>                                        \"KOR\"  #>                                       Kuwait  #>                                        \"KWT\"  #>             Lao People's Democratic Republic  #>                                        \"LAO\"  #>                                      Lebanon  #>                                        \"LBN\"  #>                                      Liberia  #>                                        \"LBR\"  #>                                        Libya  #>                                        \"LBY\"  #>                                  Saint Lucia  #>                                        \"LCA\"  #>                                Liechtenstein  #>                                        \"LIE\"  #>                                    Sri Lanka  #>                                        \"LKA\"  #>                                      Lesotho  #>                                        \"LSO\"  #>                                    Lithuania  #>                                        \"LTU\"  #>                                   Luxembourg  #>                                        \"LUX\"  #>                                       Latvia  #>                                        \"LVA\"  #>                                        Macao  #>                                        \"MAC\"  #>                   Saint Martin (French part)  #>                                        \"MAF\"  #>                                      Morocco  #>                                        \"MAR\"  #>                                       Monaco  #>                                        \"MCO\"  #>                         Moldova, Republic of  #>                                        \"MDA\"  #>                                   Madagascar  #>                                        \"MDG\"  #>                                     Maldives  #>                                        \"MDV\"  #>                                       Mexico  #>                                        \"MEX\"  #>                             Marshall Islands  #>                                        \"MHL\"  #>                              North Macedonia  #>                                        \"MKD\"  #>                                         Mali  #>                                        \"MLI\"  #>                                        Malta  #>                                        \"MLT\"  #>                                      Myanmar  #>                                        \"MMR\"  #>                                   Montenegro  #>                                        \"MNE\"  #>                                     Mongolia  #>                                        \"MNG\"  #>                     Northern Mariana Islands  #>                                        \"MNP\"  #>                                   Mozambique  #>                                        \"MOZ\"  #>                                   Mauritania  #>                                        \"MRT\"  #>                                   Montserrat  #>                                        \"MSR\"  #>                                   Martinique  #>                                        \"MTQ\"  #>                                    Mauritius  #>                                        \"MUS\"  #>                                       Malawi  #>                                        \"MWI\"  #>                                     Malaysia  #>                                        \"MYS\"  #>                                      Mayotte  #>                                        \"MYT\"  #>                                      Namibia  #>                                        \"NAM\"  #>                                New Caledonia  #>                                        \"NCL\"  #>                                        Niger  #>                                        \"NER\"  #>                               Norfolk Island  #>                                        \"NFK\"  #>                                      Nigeria  #>                                        \"NGA\"  #>                                    Nicaragua  #>                                        \"NIC\"  #>                                         Niue  #>                                        \"NIU\"  #>                                  Netherlands  #>                                        \"NLD\"  #>                                       Norway  #>                                        \"NOR\"  #>                                        Nepal  #>                                        \"NPL\"  #>                                        Nauru  #>                                        \"NRU\"  #>                                  New Zealand  #>                                        \"NZL\"  #>                                         Oman  #>                                        \"OMN\"  #>                                     Pakistan  #>                                        \"PAK\"  #>                                       Panama  #>                                        \"PAN\"  #>                                     Pitcairn  #>                                        \"PCN\"  #>                                         Peru  #>                                        \"PER\"  #>                                  Philippines  #>                                        \"PHL\"  #>                                        Palau  #>                                        \"PLW\"  #>                             Papua New Guinea  #>                                        \"PNG\"  #>                                       Poland  #>                                        \"POL\"  #>                                  Puerto Rico  #>                                        \"PRI\"  #>       Korea, Democratic People's Republic of  #>                                        \"PRK\"  #>                                     Portugal  #>                                        \"PRT\"  #>                                     Paraguay  #>                                        \"PRY\"  #>                          Palestine, State of  #>                                        \"PSE\"  #>                             French Polynesia  #>                                        \"PYF\"  #>                                        Qatar  #>                                        \"QAT\"  #>                                      Réunion  #>                                        \"REU\"  #>                                      Romania  #>                                        \"ROU\"  #>                           Russian Federation  #>                                        \"RUS\"  #>                                       Rwanda  #>                                        \"RWA\"  #>                                 Saudi Arabia  #>                                        \"SAU\"  #>                                        Sudan  #>                                        \"SDN\"  #>                                      Senegal  #>                                        \"SEN\"  #>                                    Singapore  #>                                        \"SGP\"  #> South Georgia and the South Sandwich Islands  #>                                        \"SGS\"  #> Saint Helena, Ascension and Tristan da Cunha  #>                                        \"SHN\"  #>                       Svalbard and Jan Mayen  #>                                        \"SJM\"  #>                              Solomon Islands  #>                                        \"SLB\"  #>                                 Sierra Leone  #>                                        \"SLE\"  #>                                  El Salvador  #>                                        \"SLV\"  #>                                   San Marino  #>                                        \"SMR\"  #>                                      Somalia  #>                                        \"SOM\"  #>                    Saint Pierre and Miquelon  #>                                        \"SPM\"  #>                                       Serbia  #>                                        \"SRB\"  #>                                  South Sudan  #>                                        \"SSD\"  #>                        Sao Tome and Principe  #>                                        \"STP\"  #>                                     Suriname  #>                                        \"SUR\"  #>                                     Slovakia  #>                                        \"SVK\"  #>                                     Slovenia  #>                                        \"SVN\"  #>                                       Sweden  #>                                        \"SWE\"  #>                                     Eswatini  #>                                        \"SWZ\"  #>                    Sint Maarten (Dutch part)  #>                                        \"SXM\"  #>                                   Seychelles  #>                                        \"SYC\"  #>                         Syrian Arab Republic  #>                                        \"SYR\"  #>                     Turks and Caicos Islands  #>                                        \"TCA\"  #>                                         Chad  #>                                        \"TCD\"  #>                                         Togo  #>                                        \"TGO\"  #>                                     Thailand  #>                                        \"THA\"  #>                                   Tajikistan  #>                                        \"TJK\"  #>                                      Tokelau  #>                                        \"TKL\"  #>                                 Turkmenistan  #>                                        \"TKM\"  #>                                  Timor-Leste  #>                                        \"TLS\"  #>                                        Tonga  #>                                        \"TON\"  #>                          Trinidad and Tobago  #>                                        \"TTO\"  #>                                      Tunisia  #>                                        \"TUN\"  #>                                      Türkiye  #>                                        \"TUR\"  #>                                       Tuvalu  #>                                        \"TUV\"  #>                    Taiwan, Province of China  #>                                        \"TWN\"  #>                 Tanzania, United Republic of  #>                                        \"TZA\"  #>                                       Uganda  #>                                        \"UGA\"  #>                                      Ukraine  #>                                        \"UKR\"  #>         United States Minor Outlying Islands  #>                                        \"UMI\"  #>                                      Uruguay  #>                                        \"URY\"  #>                                United States  #>                                        \"USA\"  #>                                   Uzbekistan  #>                                        \"UZB\"  #>                Holy See (Vatican City State)  #>                                        \"VAT\"  #>             Saint Vincent and the Grenadines  #>                                        \"VCT\"  #>            Venezuela, Bolivarian Republic of  #>                                        \"VEN\"  #>                      Virgin Islands, British  #>                                        \"VGB\"  #>                         Virgin Islands, U.S.  #>                                        \"VIR\"  #>                                     Viet Nam  #>                                        \"VNM\"  #>                                      Vanuatu  #>                                        \"VUT\"  #>                            Wallis and Futuna  #>                                        \"WLF\"  #>                                        Samoa  #>                                        \"WSM\"  #>                                        Yemen  #>                                        \"YEM\"  #>                                 South Africa  #>                                        \"ZAF\"  #>                                       Zambia  #>                                        \"ZMB\"  #>                                     Zimbabwe  #>                                        \"ZWE\""},{"path":"https://danielvartan.github.io/orbis/reference/filter_points_on_land.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter points on land — filter_points_on_land","title":"Filter points on land — filter_points_on_land","text":"filter_points_on_land() filters latitude/longitude points intersects given geometry. Note: function requires sf package installed.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/filter_points_on_land.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter points on land — filter_points_on_land","text":"","code":"filter_points_on_land(data, geometry)"},{"path":"https://danielvartan.github.io/orbis/reference/filter_points_on_land.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter points on land — filter_points_on_land","text":"data tibble data points filtered. must columns longitude latitude. geometry sf object geometry used filtering.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/filter_points_on_land.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter points on land — filter_points_on_land","text":"tibble.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/filter_points_on_land.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter points on land — filter_points_on_land","text":"","code":"if (FALSE) { # \\dontrun{   library(curl)   library(dplyr)   library(geobr)   library(sf)    if (has_internet()) {     data <- tibble(       latitude = brazil_state_latitude(),       longitude = brazil_state_longitude()     )      data      geometry <- read_state(code = \"SP\") |> pull(geom)      geometry |> st_bbox()      filter_points_on_land(data, geometry)   } } # }"},{"path":"https://danielvartan.github.io/orbis/reference/fix_postal_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix postal code numbers — fix_postal_code","title":"Fix postal code numbers — fix_postal_code","text":"fix_postal_code() provides tools fix postal code numbers.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/fix_postal_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fix postal code numbers — fix_postal_code","text":"","code":"fix_postal_code(   postal_code,   min_char = 3,   max_char = 8,   squish = TRUE,   remove_non_numeric = TRUE,   remove_number_sequences = TRUE,   trunc = TRUE,   pad = TRUE,   zero_na = FALSE )"},{"path":"https://danielvartan.github.io/orbis/reference/fix_postal_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fix postal code numbers — fix_postal_code","text":"postal_code character vector postal code numbers. min_char (optional) integerish number minimum number characters (default: 3). max_char (optional) integerish number maximum number characters (default: 8). squish (optional) logical flag indicating whether squish (.e., remove leading, trailing, extra spaces) postal code numbers (default: TRUE). remove_non_numeric (optional) logical flag indicating whether remove non-numeric characters postal code numbers (default: TRUE). remove_number_sequences (optional) logical flag indicating whether remove number sequences postal code numbers. useful remove postal code numbers like 11111111 (default: TRUE). trunc (optional) logical flag indicating whether truncate postal code numbers max_char width (default: TRUE). pad (optional) logical flag indicating whether pad postal code numbers zeros max_char width (default: TRUE). zero_na (optional) logical flag indicating whether replace NA values zeros (default: FALSE).","code":""},{"path":"https://danielvartan.github.io/orbis/reference/fix_postal_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fix postal code numbers — fix_postal_code","text":"character vector fixed postal code numbers.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/orbis/reference/fix_postal_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fix postal code numbers — fix_postal_code","text":"","code":"fix_postal_code(\"  01014908  \", squish = TRUE) #> [1] \"01014908\" #> [1] \"01014908\" # Expected  fix_postal_code(\"01014908\", min_char = 10) #> [1] NA #> [1] NA # Expected  fix_postal_code(\"01014908\", max_char = 5, trunc = FALSE) #> [1] NA #> [1] NA # Expected  fix_postal_code(\"A1C14D08\", remove_non_numeric = TRUE, pad = TRUE) #> [1] \"11408000\" #> [1] \"11408000\" # Expected  fix_postal_code(\"123456789\", remove_number_sequences = TRUE) #> [1] NA #> [1] NA # Expected  fix_postal_code(\"01014908\", max_char = 5, trunc = TRUE) #> [1] \"01014\" #> [1] \"01014\" # Expected  fix_postal_code(\"01253\", max_char = 8, pad = TRUE) #> [1] \"01253000\" #> [1] \"01253000\" # Expected  fix_postal_code(NA, max_char = 8, zero_na = TRUE) #> [1] \"00000000\" #> [1] \"00000000\" # Expected"},{"path":"https://danielvartan.github.io/orbis/reference/map_fill_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data to fill a map — map_fill_data","title":"Get data to fill a map — map_fill_data","text":"map_fill_data() prepares data used fill map.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/map_fill_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data to fill a map — map_fill_data","text":"","code":"map_fill_data(   data,   col_fill = NULL,   col_code,   name_col_value = \"n\",   name_col_ref = col_code,   quiet = FALSE )"},{"path":"https://danielvartan.github.io/orbis/reference/map_fill_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data to fill a map — map_fill_data","text":"data tibble data used fill. col_fill (optional) character string column name used fill. NULL, function count number occurrences value col_code (default: NULL). col_code character string column name used reference. name_col_value (optional) character string name column used value (default: \"n\"). name_col_ref (optional) character string name column used reference (default: col_code). quiet (optional) logical flag suppress messages (default: FALSE).","code":""},{"path":"https://danielvartan.github.io/orbis/reference/map_fill_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data to fill a map — map_fill_data","text":"tibble.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/orbis/reference/map_fill_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data to fill a map — map_fill_data","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  data <- tibble(   state = c(\"SP\", \"RJ\", \"MG\", \"SP\", \"RJ\", \"MG\"),   value = c(1, 2, 3, 4, 5, 6) )  map_fill_data(data, col_fill = NULL, col_code = \"state\") #> # A tibble: 3 × 2 #>   state     n #>   <chr> <int> #> 1 MG        2 #> 2 RJ        2 #> 3 SP        2  map_fill_data(data, col_fill = \"value\", col_code = \"state\") #> ! There are duplicated values in state. value will be aggregated using the mean. #> # A tibble: 3 × 2 #>   state     n #>   <chr> <dbl> #> 1 SP      2.5 #> 2 RJ      3.5 #> 3 MG      4.5"},{"path":"https://danielvartan.github.io/orbis/reference/orbis-package.html","id":null,"dir":"Reference","previous_headings":"","what":"orbis: Spatial Data Analysis Tools — orbis-package","title":"orbis: Spatial Data Analysis Tools — orbis-package","text":"suite tools simplifying spatial data analysis.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/orbis/reference/orbis-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"orbis: Spatial Data Analysis Tools — orbis-package","text":"Maintainer: Daniel Vartanian danielvartan@proton.(ORCID) [conceptor, copyright holder]","code":""},{"path":"https://danielvartan.github.io/orbis/reference/qualocep_download.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Qual o CEP data — qualocep_download","title":"Get Qual o CEP data — qualocep_download","text":"qualocep_download() retrieves validated dataset Qual o CEP package's OSF repository. Note: function requires internet connection work osfr package installed.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/qualocep_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Qual o CEP data — qualocep_download","text":"","code":"qualocep_download(file = NULL, pattern = \"2024-11-12.rds\", force = FALSE)"},{"path":"https://danielvartan.github.io/orbis/reference/qualocep_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Qual o CEP data — qualocep_download","text":"file (optional) character string path Qual o CEP dataset file. NULL, dataset downloaded package's OSF repository. (default: NULL). pattern (optional) character string pattern Qual o CEP dataset file download. Click see available patterns (default: \"2024-11-12.rds\"). force (optional) logical flag force download Qual o CEP dataset file. TRUE, dataset downloaded even already exists temporary directory (default: FALSE).","code":""},{"path":"https://danielvartan.github.io/orbis/reference/qualocep_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Qual o CEP data — qualocep_download","text":"tibble containing Qual o CEP dataset following columns: postal_code: character vector postal codes. street_type: character vector type streets. street_name: character vector name streets. street: character vector full name streets. complement: character vector complement addresses. place: character vector place addresses. neighborhood: character vector neighborhoods municipality_code: integer vector codes Brazilian Institute Geography Statistics (IBGE) Brazilian municipalities. municipality: character vector name municipalities. state_code: integer vector codes Brazilian Institute Geography Statistics (IBGE) Brazilian state. state: character vector name states. federal_unit: character vector abbreviations Brazilian federal unit. latitude: numeric vector latitude values postal codes (retrieved using Google Geocoding API). longitude: numeric vector longitude values postal codes (retrieved using Google Geocoding API).","code":""},{"path":"https://danielvartan.github.io/orbis/reference/qualocep_download.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Qual o CEP data — qualocep_download","text":"Qual o CEP database Brazilian addresses postal codes geocoded made using Google Geocoding API. Please note year pattern. values ","code":""},{"path":"https://danielvartan.github.io/orbis/reference/qualocep_download.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Qual o CEP data — qualocep_download","text":"","code":"if (FALSE) { # \\dontrun{   qualocep_download() } # }"},{"path":"https://danielvartan.github.io/orbis/reference/remove_unique_outliers.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove unique outliers from raster files — remove_unique_outliers","title":"Remove unique outliers from raster files — remove_unique_outliers","text":"remove_unique_outliers() removes unique outliers raster files (GeoTIFF Esri ASCII raster format) based interquartile range (IQR). function processes raster file reading values, identifying unique outliers using unique_outliers() function, replacing outlier values NA. modified raster saved back file, effectively overwriting original data.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/remove_unique_outliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove unique outliers from raster files — remove_unique_outliers","text":"","code":"remove_unique_outliers(file, n_iqr = 1.5)"},{"path":"https://danielvartan.github.io/orbis/reference/remove_unique_outliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove unique outliers from raster files — remove_unique_outliers","text":"file character vector file paths raster files processed. Supported file formats GeoTIFF (.tif .tiff) Esri ASCII raster (.asc). n_iqr (optional) number specifying multiplier interquartile range (IQR) define outliers. See unique_outliers() learn (default: 1.5).","code":""},{"path":"https://danielvartan.github.io/orbis/reference/remove_unique_outliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove unique outliers from raster files — remove_unique_outliers","text":"invisible NULL value. function used side effects.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/orbis/reference/remove_unique_outliers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove unique outliers from raster files — remove_unique_outliers","text":"","code":"library(readr) library(terra) #> terra 1.8.60  asc_content <- c(   \"ncols         5\",   \"nrows         5\",   \"xllcorner     0.0\",   \"yllcorner     0.0\",   \"cellsize      1.0\",   \"NODATA_value  -9999\",   \"1 2 3 4 5\",   \"6 7 8 9 10\",   \"11 12 1000 14 15\", # Extreme outlier (1000)   \"16 1 18 19 20\",   \"21 22 23 24 25\" )  temp_file <- tempfile(fileext = \".asc\")  asc_content |> write_lines(temp_file)  ## Values before `remove_unique_outliers()` temp_file |> rast() |> values(mat = FALSE) #>  [1]    1    2    3    4    5    6    7    8    9   10   11   12 1000   14   15 #> [16]   16    1   18   19   20   21   22   23   24   25  temp_file |> remove_unique_outliers()  ## Values after `remove_unique_outliers()` temp_file |> rast() |> values(mat = FALSE) #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 NA 14 15 16  1 18 19 20 21 22 23 24 25"},{"path":"https://danielvartan.github.io/orbis/reference/shift_and_crop.html","id":null,"dir":"Reference","previous_headings":"","what":"Shift, rotate, and crop a raster using a vector — shift_and_crop","title":"Shift, rotate, and crop a raster using a vector — shift_and_crop","text":"shift_and_crop() shifts rotates raster vector specified horizontal distance, crops raster extent shifted vector. function particularly useful working rasters vectors span dateline (e.g. Russian territory).","code":""},{"path":"https://danielvartan.github.io/orbis/reference/shift_and_crop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shift, rotate, and crop a raster using a vector — shift_and_crop","text":"","code":"shift_and_crop(raster, vector, dx = -45, precision = 5, overlap_tol = 0.1, ...)"},{"path":"https://danielvartan.github.io/orbis/reference/shift_and_crop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shift, rotate, and crop a raster using a vector — shift_and_crop","text":"raster SpatRaster object shifted, rotated, cropped. vector SpatVector object shifted rotated. dx (optional) numeric value indicating amount horizontal shift degrees. Positive values shift right, negative values shift left (default: -45). precision (optional) numeric value specifying number decimal digits use rounding longitude latitude coordinates (default: 5). overlap_tol (optional) numeric value specifying tolerance overlapping geometries combining vectors. value controls allowable error merging overlapping geometries (default: 0.1). ... Additional arguments passed crop().","code":""},{"path":"https://danielvartan.github.io/orbis/reference/shift_and_crop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shift, rotate, and crop a raster using a vector — shift_and_crop","text":"SpatRaster object shifted rotated specified amount degrees, cropped extent provided vector.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/orbis/reference/shift_and_crop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shift, rotate, and crop a raster using a vector — shift_and_crop","text":"","code":"if (FALSE) { # \\dontrun{   library(dplyr)   library(geodata)   library(terra)    if (curl::has_internet()) {     raster <-       expand.grid(         seq(-179.75, 179.75, by = 0.5),         seq(-89.75, 89.75, by = 0.5)       ) |>       as_tibble() |>       rename(x = Var1, y = Var2) |>       mutate(value = rnorm(259200)) |>       rast(type = \"xyz\") %>%       `crs<-`(\"epsg:4326\")      world_shape <- world(path = tempdir())     raster <- raster |> crop(world_shape, mask = TRUE)      raster |> plot()      vector <- gadm(country = \"rus\", level = 0, path = tempdir())      vector |> plot()      raster |> shift_and_crop(vector, -45) |> plot()   } } # }"},{"path":"https://danielvartan.github.io/orbis/reference/shift_and_rotate.html","id":null,"dir":"Reference","previous_headings":"","what":"Shift and rotate a raster or a vector — shift_and_rotate","title":"Shift and rotate a raster or a vector — shift_and_rotate","text":"shift_and_rotate() shifts raster vector specified horizontal distance rotating data around dateline. function particularly useful working rasters vectors span dateline (e.g., Russian territory).","code":""},{"path":"https://danielvartan.github.io/orbis/reference/shift_and_rotate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shift and rotate a raster or a vector — shift_and_rotate","text":"","code":"shift_and_rotate(x, dx = -45, precision = 5, overlap_tol = 0.1)"},{"path":"https://danielvartan.github.io/orbis/reference/shift_and_rotate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shift and rotate a raster or a vector — shift_and_rotate","text":"x SpatRaster SpatVector object shifted rotated. dx (optional) numeric value indicating amount horizontal shift degrees. Positive values shift right, negative values shift left (default: -45). precision (optional) numeric value specifying number decimal digits use rounding longitude latitude coordinates (default: 5). overlap_tol (optional) numeric value specifying tolerance overlapping geometries combining vectors. value controls allowable error merging overlapping geometries (default: 0.1).","code":""},{"path":"https://danielvartan.github.io/orbis/reference/shift_and_rotate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shift and rotate a raster or a vector — shift_and_rotate","text":"object class x shifted rotated specified amount degrees.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/orbis/reference/shift_and_rotate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shift and rotate a raster or a vector — shift_and_rotate","text":"","code":"if (FALSE) { # \\dontrun{   library(dplyr)   library(geodata)   library(terra)    ## Raster example    if (curl::has_internet()) {     raster <-       expand.grid(         seq(-179.75, 179.75, by = 0.5),         seq(-89.75, 89.75, by = 0.5)       ) |>       as_tibble() |>       rename(x = Var1, y = Var2) |>       mutate(value = rnorm(259200)) |>       rast(type = \"xyz\") %>%       `crs<-`(\"epsg:4326\")      world_shape <- world(path = tempdir())     raster <- raster |> crop(world_shape, mask = TRUE)      raster |> plot()      raster |> shift_and_rotate(-45) |> plot()      raster |> shift_and_rotate(-90) |> plot()      raster |> shift_and_rotate(-135) |> plot()      raster |> shift_and_rotate(-180) |> plot()      raster |> plot()      raster |> shift_and_rotate(45) |> plot()      raster |> shift_and_rotate(90) |> plot()      raster |> shift_and_rotate(135) |> plot()      raster |> shift_and_rotate(180) |> plot()   }    ## Vector example    if (curl::has_internet()) {     vector <- gadm(country = \"rus\", level = 0, path = tempdir())      vector |> plot()      vector |> shift_and_rotate(-45) |> plot()      vector |> shift_and_rotate(45) |> plot()   } } # }"},{"path":"https://danielvartan.github.io/orbis/reference/sidra_download_by_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and aggregate data by year from SIDRA API — sidra_download_by_year","title":"Get and aggregate data by year from SIDRA API — sidra_download_by_year","text":"sidra_download_by_year() retrieves data Brazilian Institute Geography Statistics (IBGE) Automatic Retrieval System (SIDRA) API specified range years. function addresses SIDRA API's limitations volume data can downloaded single request. downloads data year individually combines results single tibble. Note: function requires active internet connection sidrar package installed.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/sidra_download_by_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and aggregate data by year from SIDRA API — sidra_download_by_year","text":"","code":"sidra_download_by_year(years, api_start, api_end)"},{"path":"https://danielvartan.github.io/orbis/reference/sidra_download_by_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and aggregate data by year from SIDRA API — sidra_download_by_year","text":"years integerish vector years download. api_start string specifying initial part SIDRA API URL, (including) year segment. See Details section guidance. api_end string specifying final part SIDRA API URL, immediately following year segment. See Details section guidance.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/sidra_download_by_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get and aggregate data by year from SIDRA API — sidra_download_by_year","text":"tibble containing combined data requested years, retrieved SIDRA API.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/sidra_download_by_year.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get and aggregate data by year from SIDRA API — sidra_download_by_year","text":"construct API call, follow steps: Visit SIDRA website. Locate desired table containing data. Configure parameters data retrieval (e.g., variable, sex, years). Click share button (link symbol) end page. checkbox labeled \"Usar períodos relativos, quando possível.\" appears, uncheck , reload page, click share button . Copy portion \"Parâmetros para API\" URL starts \"/t\" (e.g., /t/6407...). need provide function separate parts API URL. example:   difficulty identifying correct segments, try adjusting table settings, selecting different years, examining URL changes.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/sidra_download_by_year.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get and aggregate data by year from SIDRA API — sidra_download_by_year","text":"","code":"if (FALSE) { # \\dontrun{   sidra_download_by_year(     years = 2010:2011,     api_start = \"/t/1612/n6/all/v/109/p/\",     api_end = \"/c81/2692\"   ) } # }"},{"path":"https://danielvartan.github.io/orbis/reference/unique_outliers.html","id":null,"dir":"Reference","previous_headings":"","what":"Return unique outliers — unique_outliers","title":"Return unique outliers — unique_outliers","text":"unique_outliers() returns unique outliers numeric vector based interquartile range (IQR). function first removes duplicated values input vector x ensure outlier detection based unique values. calculates first (Q1) third (Q3) quartiles, well IQR. Outliers defined values fall Q1 - n_iqr * IQR Q3 + n_iqr * IQR, n_iqr user-defined multiplier (default 1.5).","code":""},{"path":"https://danielvartan.github.io/orbis/reference/unique_outliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return unique outliers — unique_outliers","text":"","code":"unique_outliers(x, n_iqr = 1.5)"},{"path":"https://danielvartan.github.io/orbis/reference/unique_outliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return unique outliers — unique_outliers","text":"x numeric vector least 4 values. n_iqr (optional) number specifying multiplier interquartile range (IQR) define outliers (default: 1.5).","code":""},{"path":"https://danielvartan.github.io/orbis/reference/unique_outliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return unique outliers — unique_outliers","text":"numeric vector outliers x.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/orbis/reference/unique_outliers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return unique outliers — unique_outliers","text":"","code":"c(1:10) |> unique_outliers() #> integer(0) #> integer(0) # Expected  c(1:10, 100L) |> unique_outliers() #> [1] 100 #> [1] 100 # Expected  c(1:10, 100L) |> unique_outliers(n_iqr = 1000) #> integer(0) #> integer(0) # Expected"},{"path":"https://danielvartan.github.io/orbis/reference/worldclim_extract_variable.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract components from WorldClim filenames — worldclim_extract_variable","title":"Extract components from WorldClim filenames — worldclim_extract_variable","text":"worldclim_extract_*() extract components present WorldClim filenames.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/worldclim_extract_variable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract components from WorldClim filenames — worldclim_extract_variable","text":"","code":"worldclim_extract_variable(file)  worldclim_extract_resolution(file)  worldclim_extract_month(file)  worldclim_extract_year(file)  worldclim_extract_year_month(file)  worldclim_extract_year_group(file)  worldclim_extract_gcm(file)  worldclim_extract_ssp(file)"},{"path":"https://danielvartan.github.io/orbis/reference/worldclim_extract_variable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract components from WorldClim filenames — worldclim_extract_variable","text":"file character vector WorldClim filenames.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/worldclim_extract_variable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract components from WorldClim filenames — worldclim_extract_variable","text":"character vector extracted component.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/orbis/reference/worldclim_extract_variable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract components from WorldClim filenames — worldclim_extract_variable","text":"","code":"files <- c(   \"wc2.1_10m_tavg_1970-2000-06.asc\",   \"wc2.1_cruts4.09_30s_tmin_1962-10.asc\",   \"wc2.1_5m_tmax_GISS-E2-1-G_ssp370_2081-2100-05.asc\" )  files |> worldclim_extract_variable() #> [1] \"tavg\" \"tmin\" \"tmax\" #> [1] \"tavg\" \"tmin\" \"tmax\"  files |> worldclim_extract_resolution() #> [1] \"10m\" \"30s\" \"5m\"  #> [1] \"10m\" \"30s\" \"5m\"  files |> worldclim_extract_month() #> [1] \"06\" \"10\" \"05\" #> [1] \"06\" \"10\" \"05\"  files |> worldclim_extract_year() #> [1] \"1970-2000\" \"1962\"      \"2081-2100\" #> [1] \"1970-2000\" \"1962\"      \"2081-2100\"  files |> worldclim_extract_year_month() #> [1] \"1970-2000-06\" \"1962-10\"      \"2081-2100-05\" #> [1] \"1970-2000-06\" \"1962-10\"      \"2081-2100-05\"  files |> worldclim_extract_year_group() #> [1] \"1970-2000\" NA          \"2081-2100\" #> [1] NA         NA         \"2081-2100\"  files |> worldclim_extract_gcm() #> [1] NA            NA            \"GISS-E2-1-G\" #> [1] NA            NA            \"GISS-E2-1-G\"  files |> worldclim_extract_ssp() #> [1] NA       NA       \"ssp370\" #> [1] NA       NA       \"ssp370\""},{"path":"https://danielvartan.github.io/orbis/reference/worldclim_random.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a random WorldClim data selection — worldclim_random","title":"Return a random WorldClim data selection — worldclim_random","text":"worldclim_random() returns random selection parameters downloading WorldClim data.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/worldclim_random.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a random WorldClim data selection — worldclim_random","text":"","code":"worldclim_random(series = \"hcd\")"},{"path":"https://danielvartan.github.io/orbis/reference/worldclim_random.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a random WorldClim data selection — worldclim_random","text":"series string indicating WorldClim data series use. Choices : 'hcd' (Historical Climate Data), 'hmwd' (Historical Monthly Weather Data), 'fcd' (Future Climate Data) (default: \"hcd\").","code":""},{"path":"https://danielvartan.github.io/orbis/reference/worldclim_random.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a random WorldClim data selection — worldclim_random","text":"list random selection parameters downloading WorldClim data. list contains following elements: series: selected data series. resolution: selected spatial resolution. variable: selected climate variable. bioclimatic_variable: selected bioclimatic variable (Historical Climate Data Future Climate Data variable set \"bioc\"). model: selected climate model (Future Climate Data). ssp: selected Shared Socioeconomic Pathway (Future Climate Data). month: selected month. year: selected year year range.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/orbis/reference/worldclim_random.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return a random WorldClim data selection — worldclim_random","text":"","code":"worldclim_random(\"hcd\") #> $series #>   Historical Climate Data  #> \"historical-climate-data\"  #>  #> $resolution #> 5 Minutes (~85 km2 at the Equator)  #>                               \"5m\"  #>  #> $variable #> Average Temperature (°C)  #>                   \"tavg\"  #>  #> $month #> February  #>        2  #>  #> $year #> 1970-2000  #>      1983  #>   worldclim_random(\"hmwd\") #> $series #>   Historical Monthly Weather Data  #> \"historical-monthly-weather-data\"  #>  #> $resolution #> 10 Minutes (~340 km2 at the Equator)  #>                                \"10m\"  #>  #> $variable #> Total Precipitation (mm)  #>                   \"prec\"  #>  #> $month #> September  #>         9  #>  #> $year #> [1] 1987 #>   worldclim_random(\"fcd\") #> $series #>   Future Climate Data  #> \"future-climate-data\"  #>  #> $resolution #> 30 Seconds (~1 km2  at the Equator)  #>                               \"30s\"  #>  #> $variable #> Bioclimatic Variables  #>                \"bioc\"  #>  #> $bioclimatic_variable #> BIO3 - Isothermality (BIO2 / BIO7) (×100)  #>                                         3  #>  #> $model #> [1] \"MIROC6\" #>  #> $ssp #>  SSP-245  #> \"ssp245\"  #>  #> $month #> January  #>       1  #>  #> $year #> 2041-2060  #>      2048  #>"},{"path":"https://danielvartan.github.io/orbis/reference/worldclim_to_ascii.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert WorldClim GeoTIFF files to Esri ASCII Grid — worldclim_to_ascii","title":"Convert WorldClim GeoTIFF files to Esri ASCII Grid — worldclim_to_ascii","text":"worldclim_to_ascii() facilitates conversion one WorldClim GeoTIFF files Esri ASCII Grid raster format. Optionally, rasters can cropped /aggregated using provided polygon class SpatVector.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/worldclim_to_ascii.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert WorldClim GeoTIFF files to Esri ASCII Grid — worldclim_to_ascii","text":"","code":"worldclim_to_ascii(   file,   dir = dirname(file[1]),   shape = NULL,   box = NULL,   dateline_fix = TRUE,   extreme_outlier_fix = TRUE,   aggregate = NULL,   overwrite = TRUE,   dx = -45,   na_flag = -99,   ... )"},{"path":"https://danielvartan.github.io/orbis/reference/worldclim_to_ascii.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert WorldClim GeoTIFF files to Esri ASCII Grid — worldclim_to_ascii","text":"file character vector file paths WorldClim GeoTIFF files converted. files must .tif extension. dir character vector specifying output directory converted ASCII files (default: dirname(file[1])). shape (optional) SpatVector object representing polygon crop raster data. function crop raster data extent polygon (default: NULL). box (optional) numeric vector length 4 specifying bounding box cropping raster data format c(xmin, ymin, xmax, ymax) (default: NULL). dateline_fix (optional) logical flag indicating whether apply dateline fix raster data. particularly useful working rasters vectors span dateline (e.g. Russian territory). See shift_and_crop learn (default: TRUE). extreme_outlier_fix (optional) logical flag indicating whether replace extreme outliers NA. Extreme outliers defined values 10 times interquartile range (IQR) first third quartile. quartiles IQR calculated using unique (deduplicated) values data, resulting thresholds applied full dataset. helps remove abnormal values raster data. aggregate (optional) integer value specifying aggregation factor. function aggregate raster data factor. See aggregate() details (default: NULL). overwrite (optional) logical flag indicating whether overwrite existing files output directory (default: TRUE). dx (optional) numeric value specifying horizontal distance degrees shift raster data. relevant dateline_fix set TRUE (default: -45). na_flag (optional) integer value specifying NoData value output ASCII files. See Details section learn (default: -99). ... Additional arguments passed writeRaster() writing ASCII files.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/worldclim_to_ascii.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert WorldClim GeoTIFF files to Esri ASCII Grid — worldclim_to_ascii","text":"character vector containing file paths converted ASCII files.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/orbis/reference/worldclim_to_ascii.html","id":"na-flag-parameter","dir":"Reference","previous_headings":"","what":"na_flag parameter","title":"Convert WorldClim GeoTIFF files to Esri ASCII Grid — worldclim_to_ascii","text":"According Esri ASCII raster format documentation, default value NODATA_VALUE (NA flag) -9999. However, using four digits precision significantly inflates file size. WorldClim data, two significant digits (-99) sufficient, since variables negative values temperatures, lowest temperature ever recorded Earth .","code":""},{"path":[]},{"path":"https://danielvartan.github.io/orbis/reference/worldclim_to_ascii.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert WorldClim GeoTIFF files to Esri ASCII Grid — worldclim_to_ascii","text":"","code":"if (FALSE) { # \\dontrun{   library(curl)   library(fs)   library(magrittr)   library(readr)   library(rvest)   library(stringr)   library(zip)    # Download the WorldClim Data    url <-     worldclim_url(\"hcd\") |>     rvest::read_html() |>     rvest::html_elements(\"a\") |>     rvest::html_attr(\"href\") |>     stringr::str_subset(\"geodata\") |>     magrittr::extract(1)    zip_file <- basename(url)    curl::curl_download(url, path(tempdir(), zip_file))    path(tempdir(), zip_file) |>     zip::unzip(exdir = tempdir())    tif_file <-     dir_ls(tempdir(), regexp = \"\\\\.tif$\") |>     magrittr::extract(1)    # Run the Function    asc_file <- tif_file |> worldclim_to_ascii()    # Check the Output    asc_file |> read_lines(n_max = 6) } # }"},{"path":"https://danielvartan.github.io/orbis/reference/worldclim_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Get paths to WorldClim data — worldclim_url","title":"Get paths to WorldClim data — worldclim_url","text":"worldclim_url() returns URL(s) WorldClim data series.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/worldclim_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get paths to WorldClim data — worldclim_url","text":"","code":"worldclim_url(series, resolution = \"all\")"},{"path":"https://danielvartan.github.io/orbis/reference/worldclim_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get paths to WorldClim data — worldclim_url","text":"series character vector name WorldClim data series. following options available: \"hcd\" \"historical-climate-data\" \"historical climate data\". \"hmwd\" \"historical-monthly-weather-data\" \"historical monthly weather data\". \"fcd\" \"future-climate-data\" \"future climate data\". resolution (optional) character vector resolution WorldClim data series. following options available: \"\" (default) returns available resolutions. \"10m\" returns 10m resolution. \"5m\" returns 5m resolution. \"2.5m\" returns 2.5m resolution. \"30s\" returns 30s resolution.","code":""},{"path":"https://danielvartan.github.io/orbis/reference/worldclim_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get paths to WorldClim data — worldclim_url","text":"named character vector URL(s) OSF ID(s) WorldClim data series.","code":""},{"path":[]},{"path":"https://danielvartan.github.io/orbis/reference/worldclim_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get paths to WorldClim data — worldclim_url","text":"","code":"worldclim_url(\"hcd\") #>                       Historical climate data  #> \"https://worldclim.org/data/worldclim21.html\"   worldclim_url(\"historical climate data\") #>                       Historical climate data  #> \"https://worldclim.org/data/worldclim21.html\"   worldclim_url(\"hmwd\") #>              Historical monthly weather data  #> \"https://worldclim.org/data/monthlywth.html\"   worldclim_url(\"historical monthly weather data\") #>              Historical monthly weather data  #> \"https://worldclim.org/data/monthlywth.html\"   worldclim_url(\"fcd\") #>                              Future climate data (10m)  #>  \"https://worldclim.org/data/cmip6/cmip6_clim10m.html\"  #>                               Future climate data (5m)  #>   \"https://worldclim.org/data/cmip6/cmip6_clim5m.html\"  #>                             Future climate data (2.5m)  #> \"https://worldclim.org/data/cmip6/cmip6_clim2.5m.html\"  #>                              Future climate data (30s)  #>  \"https://worldclim.org/data/cmip6/cmip6_clim30s.html\"   worldclim_url(\"future climate data\") #>                              Future climate data (10m)  #>  \"https://worldclim.org/data/cmip6/cmip6_clim10m.html\"  #>                               Future climate data (5m)  #>   \"https://worldclim.org/data/cmip6/cmip6_clim5m.html\"  #>                             Future climate data (2.5m)  #> \"https://worldclim.org/data/cmip6/cmip6_clim2.5m.html\"  #>                              Future climate data (30s)  #>  \"https://worldclim.org/data/cmip6/cmip6_clim30s.html\"   worldclim_url(\"future climate data\", \"10m\") #>                             Future climate data (10m)  #> \"https://worldclim.org/data/cmip6/cmip6_clim10m.html\"   worldclim_url(c(\"hcd\", \"hmwd\", \"fcd\")) #>                                Historical climate data  #>          \"https://worldclim.org/data/worldclim21.html\"  #>                        Historical monthly weather data  #>           \"https://worldclim.org/data/monthlywth.html\"  #>                              Future climate data (10m)  #>  \"https://worldclim.org/data/cmip6/cmip6_clim10m.html\"  #>                               Future climate data (5m)  #>   \"https://worldclim.org/data/cmip6/cmip6_clim5m.html\"  #>                             Future climate data (2.5m)  #> \"https://worldclim.org/data/cmip6/cmip6_clim2.5m.html\"  #>                              Future climate data (30s)  #>  \"https://worldclim.org/data/cmip6/cmip6_clim30s.html\"   worldclim_url(c(\"hcd\", \"hmwd\", \"fcd\"), \"5m\") #>                              Historical climate data  #>        \"https://worldclim.org/data/worldclim21.html\"  #>                      Historical monthly weather data  #>         \"https://worldclim.org/data/monthlywth.html\"  #>                             Future climate data (5m)  #> \"https://worldclim.org/data/cmip6/cmip6_clim5m.html\""},{"path":"https://danielvartan.github.io/orbis/news/index.html","id":"orbis-0109000-development-version","dir":"Changelog","previous_headings":"","what":"orbis 0.1.0.9000 (development version)","title":"orbis 0.1.0.9000 (development version)","text":"Moved several dependencies Suggests DESCRIPTION file. Removed get_ names functions. Renamed wc_*() functions worldclim_*() clarity. Added unique_outliers() remove_unique_outliers() handle unique outliers data. Added worldclim_random() worldclim_extract_*() deal WorldClim data. Changed package license MIT GPLv3. Updated Code Conduct Contributor Covenant 3.0. Improved error handling messaging throughout package. Added unit tests increase code coverage. Updated documentation.","code":""},{"path":"https://danielvartan.github.io/orbis/news/index.html","id":"orbis-010","dir":"Changelog","previous_headings":"","what":"orbis 0.1.0","title":"orbis 0.1.0","text":"First release. 🎉","code":""},{"path":"https://danielvartan.github.io/orbis/news/index.html","id":"orbis-0009000","dir":"Changelog","previous_headings":"","what":"orbis 0.0.0.9000","title":"orbis 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
