% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filter_points_on_land.R
\name{filter_points_on_land}
\alias{filter_points_on_land}
\title{Filter points on land}
\usage{
filter_points_on_land(data, geometry)
}
\arguments{
\item{data}{A \code{\link[tibble:tibble]{tibble}} with the data points to be filtered.
It must have columns \code{longitude} and \code{latitude}.}

\item{geometry}{A \code{\link[sf:sf]{sf}} object with the geometry to be used for
filtering.}
}
\value{
A \code{\link[tibble:tibble]{tibble}}.
}
\description{
\code{filter_points_on_land()} filters latitude/longitude points that intersects
with a given geometry.

\strong{Note:} This function requires the \href{https://r-spatial.github.io/sf/}{\code{sf}}
package to be installed.
}
\examples{
\dontrun{
  library(curl)
  library(dplyr)
  library(ggplot2)
  library(geobr)
  library(sf)

  if (has_internet()) {
    data <- tibble(
      latitude = brazil_state_latitude(),
      longitude = brazil_state_longitude()
    )

    data

    plot_points <- function(data, vector) {
      plot <-
        data |>
        ggplot(aes(x = longitude, y = latitude)) +
        geom_sf(
          data = vector,
          color = "gray75",
          fill = "white",
          inherit.aes = FALSE
        ) +
        geom_point(color = "#3243A6") +
        labs(x = "Longitude", y = "Latitude")

      print(plot)
    }

    brazil_state_vector <- read_state()

    data |> plot_points(brazil_state_vector)

    sp_state_vector <- read_state(code = "SP")

    sp_state_vector |> st_bbox()

    data <- filter_points_on_land(data, sp_state_vector |> pull(geom))

    data

    data |> plot_points(brazil_state_vector)
  }
}
}
\concept{\code{sf} functions}
