% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/map_fill_data.R
\name{map_fill_data}
\alias{map_fill_data}
\title{Prepare data to fill a map}
\usage{
map_fill_data(
  data,
  col_fill = NULL,
  col_ref,
  name_col_value = "value",
  name_col_ref = col_ref
)
}
\arguments{
\item{data}{A \code{\link[tibble:tibble]{tibble}} with the data to be used as fill.}

\item{col_fill}{(optional) A \code{\link[base:character]{character}} string with
the column name to be used as fill. If \code{NULL}, the function will count
the number of occurrences of each value in \code{col_ref} (default: \code{NULL}).}

\item{col_ref}{A \code{\link[base:character]{character}} string with the column
name to be used as reference.}

\item{name_col_value}{(optional) A \code{\link[base:character]{character}} string
with the name of the column to be used as value (default: \code{"value"}).}

\item{name_col_ref}{(optional) A \code{\link[base:character]{character}} string
with the name of the column to be used as reference (default: \code{col_ref}).}
}
\value{
A \code{\link[tibble:tibble]{tibble}} with two columns:
\itemize{
\item \code{name_col_ref}: with unique values from \code{col_ref}.
\item \code{name_col_value}: with the values from \code{col_fill} or the count of
occurrences of each value in \code{col_ref} (if \code{col_fill} is \code{NULL}).
}
}
\description{
\code{map_fill_data()} prepares data to be used as fill in a map plot.
}
\examples{
# Set the Environment -----

library(curl)
library(dplyr)
library(geodata)
library(ggplot2)
library(terra)
library(tidyterra)

plot_vector_shape <- function(vector) {
  plot <-
    vector |>
    ggplot() +
    geom_spatvector(fill = "white", color = "#3243A6")

  print(plot)
}

plot_vector_data <- function(data, vector) {
  plot <-
    data |>
    ggplot() +
    geom_spatvector(aes(fill = value), color = "white") +
    scale_fill_continuous(
        palette = c("#072359", "#3243A6", "#9483AF"),
        na.value = "white"
    ) +
    labs(fill = NULL)

  print(plot)
}

# Define the Map -----

\dontrun{
  if (has_internet()) {
    brazil_states_vector <- gadm("BRA", level = 1, path = tempdir())
  }
}

# Visualize the Map -----

\dontrun{
  if (has_internet()) {
    brazil_states_vector |> plot_vector_shape()
  }
}

# Define the Data -----

\dontrun{
  if (has_internet()) {
    data <- tibble(
      state = sample(
        brazil_states_vector$NAME_1, size = 1000, replace = TRUE
      ),
      value = sample(1:1000, size = 1000, replace = TRUE)
    )

    data
  }
}

# Create the Map Fill Data -----

\dontrun{
  if (has_internet()) {
    data <- data |> map_fill_data(col_fill = "value", col_ref = "state")

    data
  }
}

# Visualize the Map Fill Data -----

\dontrun{
  if (has_internet()) {
    brazil_states_vector |>
      left_join(data, by = c("NAME_1" = "state")) |>
      plot_vector_data()
  }
}
}
\seealso{
Other utility functions: 
\code{\link{closest_geobr_year}()},
\code{\link{fix_postal_code}()},
\code{\link{remove_unique_outliers}()},
\code{\link{test_geobr_connection}()},
\code{\link{unique_outliers}()}
}
\concept{utility functions}
